// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/transaction.proto

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Transaction_MerchantBalanceUpdateTranaction_FullMethodName    = "/transaction.Transaction/MerchantBalanceUpdateTranaction"
	Transaction_MerchantBalanceFreezeTranaction_FullMethodName    = "/transaction.Transaction/MerchantBalanceFreezeTranaction"
	Transaction_ProxyOrderTranaction_DFB_FullMethodName           = "/transaction.Transaction/ProxyOrderTranaction_DFB"
	Transaction_ProxyOrderTranaction_XFB_FullMethodName           = "/transaction.Transaction/ProxyOrderTranaction_XFB"
	Transaction_ProxyOrderSmartTranaction_DFB_FullMethodName      = "/transaction.Transaction/ProxyOrderSmartTranaction_DFB"
	Transaction_ProxyOrderSmartTranaction_XFB_FullMethodName      = "/transaction.Transaction/ProxyOrderSmartTranaction_XFB"
	Transaction_ProxyOrderTransactionFail_DFB_FullMethodName      = "/transaction.Transaction/ProxyOrderTransactionFail_DFB"
	Transaction_ProxyOrderTransactionFail_XFB_FullMethodName      = "/transaction.Transaction/ProxyOrderTransactionFail_XFB"
	Transaction_PayOrderSwitchTest_FullMethodName                 = "/transaction.Transaction/PayOrderSwitchTest"
	Transaction_ProxyOrderToTest_DFB_FullMethodName               = "/transaction.Transaction/ProxyOrderToTest_DFB"
	Transaction_ProxyOrderToTest_XFB_FullMethodName               = "/transaction.Transaction/ProxyOrderToTest_XFB"
	Transaction_ProxyTestToNormal_DFB_FullMethodName              = "/transaction.Transaction/ProxyTestToNormal_DFB"
	Transaction_ProxyTestToNormal_XFB_FullMethodName              = "/transaction.Transaction/ProxyTestToNormal_XFB"
	Transaction_PayOrderTranaction_FullMethodName                 = "/transaction.Transaction/PayOrderTranaction"
	Transaction_InternalOrderTransaction_FullMethodName           = "/transaction.Transaction/InternalOrderTransaction"
	Transaction_WithdrawOrderTransaction_FullMethodName           = "/transaction.Transaction/WithdrawOrderTransaction"
	Transaction_PayCallBackTranaction_FullMethodName              = "/transaction.Transaction/PayCallBackTranaction"
	Transaction_InternalReviewSuccessTransaction_FullMethodName   = "/transaction.Transaction/InternalReviewSuccessTransaction"
	Transaction_WithdrawReviewFailTransaction_FullMethodName      = "/transaction.Transaction/WithdrawReviewFailTransaction"
	Transaction_WithdrawReviewSuccessTransaction_FullMethodName   = "/transaction.Transaction/WithdrawReviewSuccessTransaction"
	Transaction_ProxyOrderUITransaction_DFB_FullMethodName        = "/transaction.Transaction/ProxyOrderUITransaction_DFB"
	Transaction_ProxyOrderUITransaction_XFB_FullMethodName        = "/transaction.Transaction/ProxyOrderUITransaction_XFB"
	Transaction_MakeUpReceiptOrderTransaction_FullMethodName      = "/transaction.Transaction/MakeUpReceiptOrderTransaction"
	Transaction_ConfirmPayOrderTransaction_FullMethodName         = "/transaction.Transaction/ConfirmPayOrderTransaction"
	Transaction_ConfirmProxyPayOrderTransaction_FullMethodName    = "/transaction.Transaction/ConfirmProxyPayOrderTransaction"
	Transaction_RecoverReceiptOrderTransaction_FullMethodName     = "/transaction.Transaction/RecoverReceiptOrderTransaction"
	Transaction_FrozenReceiptOrderTransaction_FullMethodName      = "/transaction.Transaction/FrozenReceiptOrderTransaction"
	Transaction_UnFrozenReceiptOrderTransaction_FullMethodName    = "/transaction.Transaction/UnFrozenReceiptOrderTransaction"
	Transaction_PersonalRebundTransaction_DFB_FullMethodName      = "/transaction.Transaction/PersonalRebundTransaction_DFB"
	Transaction_PersonalRebundTransaction_XFB_FullMethodName      = "/transaction.Transaction/PersonalRebundTransaction_XFB"
	Transaction_RecalculateProfitTransaction_FullMethodName       = "/transaction.Transaction/RecalculateProfitTransaction"
	Transaction_CalculateCommissionMonthAllReport_FullMethodName  = "/transaction.Transaction/CalculateCommissionMonthAllReport"
	Transaction_RecalculateCommissionMonthReport_FullMethodName   = "/transaction.Transaction/RecalculateCommissionMonthReport"
	Transaction_ConfirmCommissionMonthReport_FullMethodName       = "/transaction.Transaction/ConfirmCommissionMonthReport"
	Transaction_CalculateMonthProfitReport_FullMethodName         = "/transaction.Transaction/CalculateMonthProfitReport"
	Transaction_WithdrawCommissionOrderTransaction_FullMethodName = "/transaction.Transaction/WithdrawCommissionOrderTransaction"
	Transaction_WithdrawOrderToTest_XFB_FullMethodName            = "/transaction.Transaction/WithdrawOrderToTest_XFB"
	Transaction_WithdrawTestToNormal_XFB_FullMethodName           = "/transaction.Transaction/WithdrawTestToNormal_XFB"
)

// TransactionClient is the client API for Transaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionClient interface {
	MerchantBalanceUpdateTranaction(ctx context.Context, in *MerchantBalanceUpdateRequest, opts ...grpc.CallOption) (*MerchantBalanceUpdateResponse, error)
	MerchantBalanceFreezeTranaction(ctx context.Context, in *MerchantBalanceFreezeRequest, opts ...grpc.CallOption) (*MerchantBalanceFreezeResponse, error)
	ProxyOrderTranaction_DFB(ctx context.Context, in *ProxyOrderRequest, opts ...grpc.CallOption) (*ProxyOrderResponse, error)
	ProxyOrderTranaction_XFB(ctx context.Context, in *ProxyOrderRequest, opts ...grpc.CallOption) (*ProxyOrderResponse, error)
	ProxyOrderSmartTranaction_DFB(ctx context.Context, in *ProxyOrderSmartRequest, opts ...grpc.CallOption) (*ProxyOrderResponse, error)
	ProxyOrderSmartTranaction_XFB(ctx context.Context, in *ProxyOrderSmartRequest, opts ...grpc.CallOption) (*ProxyOrderResponse, error)
	ProxyOrderTransactionFail_DFB(ctx context.Context, in *ProxyPayFailRequest, opts ...grpc.CallOption) (*ProxyPayFailResponse, error)
	ProxyOrderTransactionFail_XFB(ctx context.Context, in *ProxyPayFailRequest, opts ...grpc.CallOption) (*ProxyPayFailResponse, error)
	PayOrderSwitchTest(ctx context.Context, in *PayOrderSwitchTestRequest, opts ...grpc.CallOption) (*PayOrderSwitchTestResponse, error)
	ProxyOrderToTest_DFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error)
	ProxyOrderToTest_XFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error)
	ProxyTestToNormal_DFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error)
	ProxyTestToNormal_XFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error)
	PayOrderTranaction(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderResponse, error)
	InternalOrderTransaction(ctx context.Context, in *InternalOrderRequest, opts ...grpc.CallOption) (*InternalOrderResponse, error)
	WithdrawOrderTransaction(ctx context.Context, in *WithdrawOrderRequest, opts ...grpc.CallOption) (*WithdrawOrderResponse, error)
	PayCallBackTranaction(ctx context.Context, in *PayCallBackRequest, opts ...grpc.CallOption) (*PayCallBackResponse, error)
	InternalReviewSuccessTransaction(ctx context.Context, in *InternalReviewSuccessRequest, opts ...grpc.CallOption) (*InternalReviewSuccessResponse, error)
	WithdrawReviewFailTransaction(ctx context.Context, in *WithdrawReviewFailRequest, opts ...grpc.CallOption) (*WithdrawReviewFailResponse, error)
	WithdrawReviewSuccessTransaction(ctx context.Context, in *WithdrawReviewSuccessRequest, opts ...grpc.CallOption) (*WithdrawReviewSuccessResponse, error)
	ProxyOrderUITransaction_DFB(ctx context.Context, in *ProxyOrderUIRequest, opts ...grpc.CallOption) (*ProxyOrderUIResponse, error)
	ProxyOrderUITransaction_XFB(ctx context.Context, in *ProxyOrderUIRequest, opts ...grpc.CallOption) (*ProxyOrderUIResponse, error)
	MakeUpReceiptOrderTransaction(ctx context.Context, in *MakeUpReceiptOrderRequest, opts ...grpc.CallOption) (*MakeUpReceiptOrderResponse, error)
	ConfirmPayOrderTransaction(ctx context.Context, in *ConfirmPayOrderRequest, opts ...grpc.CallOption) (*ConfirmPayOrderResponse, error)
	ConfirmProxyPayOrderTransaction(ctx context.Context, in *ConfirmProxyPayOrderRequest, opts ...grpc.CallOption) (*ConfirmProxyPayOrderResponse, error)
	RecoverReceiptOrderTransaction(ctx context.Context, in *RecoverReceiptOrderRequest, opts ...grpc.CallOption) (*RecoverReceiptOrderResponse, error)
	FrozenReceiptOrderTransaction(ctx context.Context, in *FrozenReceiptOrderRequest, opts ...grpc.CallOption) (*FrozenReceiptOrderResponse, error)
	UnFrozenReceiptOrderTransaction(ctx context.Context, in *UnFrozenReceiptOrderRequest, opts ...grpc.CallOption) (*UnFrozenReceiptOrderResponse, error)
	PersonalRebundTransaction_DFB(ctx context.Context, in *PersonalRebundRequest, opts ...grpc.CallOption) (*PersonalRebundResponse, error)
	PersonalRebundTransaction_XFB(ctx context.Context, in *PersonalRebundRequest, opts ...grpc.CallOption) (*PersonalRebundResponse, error)
	RecalculateProfitTransaction(ctx context.Context, in *RecalculateProfitRequest, opts ...grpc.CallOption) (*RecalculateProfitResponse, error)
	CalculateCommissionMonthAllReport(ctx context.Context, in *CalculateCommissionMonthAllRequest, opts ...grpc.CallOption) (*CalculateCommissionMonthAllResponse, error)
	RecalculateCommissionMonthReport(ctx context.Context, in *RecalculateCommissionMonthReportRequest, opts ...grpc.CallOption) (*RecalculateCommissionMonthReportResponse, error)
	ConfirmCommissionMonthReport(ctx context.Context, in *ConfirmCommissionMonthReportRequest, opts ...grpc.CallOption) (*ConfirmCommissionMonthReportResponse, error)
	CalculateMonthProfitReport(ctx context.Context, in *CalculateMonthProfitReportRequest, opts ...grpc.CallOption) (*CalculateMonthProfitReportResponse, error)
	WithdrawCommissionOrderTransaction(ctx context.Context, in *WithdrawCommissionOrderRequest, opts ...grpc.CallOption) (*WithdrawCommissionOrderResponse, error)
	WithdrawOrderToTest_XFB(ctx context.Context, in *WithdrawOrderTestRequest, opts ...grpc.CallOption) (*WithdrawOrderTestResponse, error)
	WithdrawTestToNormal_XFB(ctx context.Context, in *WithdrawOrderTestRequest, opts ...grpc.CallOption) (*WithdrawOrderTestResponse, error)
}

type transactionClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionClient(cc grpc.ClientConnInterface) TransactionClient {
	return &transactionClient{cc}
}

func (c *transactionClient) MerchantBalanceUpdateTranaction(ctx context.Context, in *MerchantBalanceUpdateRequest, opts ...grpc.CallOption) (*MerchantBalanceUpdateResponse, error) {
	out := new(MerchantBalanceUpdateResponse)
	err := c.cc.Invoke(ctx, Transaction_MerchantBalanceUpdateTranaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) MerchantBalanceFreezeTranaction(ctx context.Context, in *MerchantBalanceFreezeRequest, opts ...grpc.CallOption) (*MerchantBalanceFreezeResponse, error) {
	out := new(MerchantBalanceFreezeResponse)
	err := c.cc.Invoke(ctx, Transaction_MerchantBalanceFreezeTranaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderTranaction_DFB(ctx context.Context, in *ProxyOrderRequest, opts ...grpc.CallOption) (*ProxyOrderResponse, error) {
	out := new(ProxyOrderResponse)
	err := c.cc.Invoke(ctx, Transaction_ProxyOrderTranaction_DFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderTranaction_XFB(ctx context.Context, in *ProxyOrderRequest, opts ...grpc.CallOption) (*ProxyOrderResponse, error) {
	out := new(ProxyOrderResponse)
	err := c.cc.Invoke(ctx, Transaction_ProxyOrderTranaction_XFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderSmartTranaction_DFB(ctx context.Context, in *ProxyOrderSmartRequest, opts ...grpc.CallOption) (*ProxyOrderResponse, error) {
	out := new(ProxyOrderResponse)
	err := c.cc.Invoke(ctx, Transaction_ProxyOrderSmartTranaction_DFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderSmartTranaction_XFB(ctx context.Context, in *ProxyOrderSmartRequest, opts ...grpc.CallOption) (*ProxyOrderResponse, error) {
	out := new(ProxyOrderResponse)
	err := c.cc.Invoke(ctx, Transaction_ProxyOrderSmartTranaction_XFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderTransactionFail_DFB(ctx context.Context, in *ProxyPayFailRequest, opts ...grpc.CallOption) (*ProxyPayFailResponse, error) {
	out := new(ProxyPayFailResponse)
	err := c.cc.Invoke(ctx, Transaction_ProxyOrderTransactionFail_DFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderTransactionFail_XFB(ctx context.Context, in *ProxyPayFailRequest, opts ...grpc.CallOption) (*ProxyPayFailResponse, error) {
	out := new(ProxyPayFailResponse)
	err := c.cc.Invoke(ctx, Transaction_ProxyOrderTransactionFail_XFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PayOrderSwitchTest(ctx context.Context, in *PayOrderSwitchTestRequest, opts ...grpc.CallOption) (*PayOrderSwitchTestResponse, error) {
	out := new(PayOrderSwitchTestResponse)
	err := c.cc.Invoke(ctx, Transaction_PayOrderSwitchTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderToTest_DFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error) {
	out := new(ProxyOrderTestResponse)
	err := c.cc.Invoke(ctx, Transaction_ProxyOrderToTest_DFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderToTest_XFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error) {
	out := new(ProxyOrderTestResponse)
	err := c.cc.Invoke(ctx, Transaction_ProxyOrderToTest_XFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyTestToNormal_DFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error) {
	out := new(ProxyOrderTestResponse)
	err := c.cc.Invoke(ctx, Transaction_ProxyTestToNormal_DFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyTestToNormal_XFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error) {
	out := new(ProxyOrderTestResponse)
	err := c.cc.Invoke(ctx, Transaction_ProxyTestToNormal_XFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PayOrderTranaction(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderResponse, error) {
	out := new(PayOrderResponse)
	err := c.cc.Invoke(ctx, Transaction_PayOrderTranaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) InternalOrderTransaction(ctx context.Context, in *InternalOrderRequest, opts ...grpc.CallOption) (*InternalOrderResponse, error) {
	out := new(InternalOrderResponse)
	err := c.cc.Invoke(ctx, Transaction_InternalOrderTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) WithdrawOrderTransaction(ctx context.Context, in *WithdrawOrderRequest, opts ...grpc.CallOption) (*WithdrawOrderResponse, error) {
	out := new(WithdrawOrderResponse)
	err := c.cc.Invoke(ctx, Transaction_WithdrawOrderTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PayCallBackTranaction(ctx context.Context, in *PayCallBackRequest, opts ...grpc.CallOption) (*PayCallBackResponse, error) {
	out := new(PayCallBackResponse)
	err := c.cc.Invoke(ctx, Transaction_PayCallBackTranaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) InternalReviewSuccessTransaction(ctx context.Context, in *InternalReviewSuccessRequest, opts ...grpc.CallOption) (*InternalReviewSuccessResponse, error) {
	out := new(InternalReviewSuccessResponse)
	err := c.cc.Invoke(ctx, Transaction_InternalReviewSuccessTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) WithdrawReviewFailTransaction(ctx context.Context, in *WithdrawReviewFailRequest, opts ...grpc.CallOption) (*WithdrawReviewFailResponse, error) {
	out := new(WithdrawReviewFailResponse)
	err := c.cc.Invoke(ctx, Transaction_WithdrawReviewFailTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) WithdrawReviewSuccessTransaction(ctx context.Context, in *WithdrawReviewSuccessRequest, opts ...grpc.CallOption) (*WithdrawReviewSuccessResponse, error) {
	out := new(WithdrawReviewSuccessResponse)
	err := c.cc.Invoke(ctx, Transaction_WithdrawReviewSuccessTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderUITransaction_DFB(ctx context.Context, in *ProxyOrderUIRequest, opts ...grpc.CallOption) (*ProxyOrderUIResponse, error) {
	out := new(ProxyOrderUIResponse)
	err := c.cc.Invoke(ctx, Transaction_ProxyOrderUITransaction_DFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderUITransaction_XFB(ctx context.Context, in *ProxyOrderUIRequest, opts ...grpc.CallOption) (*ProxyOrderUIResponse, error) {
	out := new(ProxyOrderUIResponse)
	err := c.cc.Invoke(ctx, Transaction_ProxyOrderUITransaction_XFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) MakeUpReceiptOrderTransaction(ctx context.Context, in *MakeUpReceiptOrderRequest, opts ...grpc.CallOption) (*MakeUpReceiptOrderResponse, error) {
	out := new(MakeUpReceiptOrderResponse)
	err := c.cc.Invoke(ctx, Transaction_MakeUpReceiptOrderTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ConfirmPayOrderTransaction(ctx context.Context, in *ConfirmPayOrderRequest, opts ...grpc.CallOption) (*ConfirmPayOrderResponse, error) {
	out := new(ConfirmPayOrderResponse)
	err := c.cc.Invoke(ctx, Transaction_ConfirmPayOrderTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ConfirmProxyPayOrderTransaction(ctx context.Context, in *ConfirmProxyPayOrderRequest, opts ...grpc.CallOption) (*ConfirmProxyPayOrderResponse, error) {
	out := new(ConfirmProxyPayOrderResponse)
	err := c.cc.Invoke(ctx, Transaction_ConfirmProxyPayOrderTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) RecoverReceiptOrderTransaction(ctx context.Context, in *RecoverReceiptOrderRequest, opts ...grpc.CallOption) (*RecoverReceiptOrderResponse, error) {
	out := new(RecoverReceiptOrderResponse)
	err := c.cc.Invoke(ctx, Transaction_RecoverReceiptOrderTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) FrozenReceiptOrderTransaction(ctx context.Context, in *FrozenReceiptOrderRequest, opts ...grpc.CallOption) (*FrozenReceiptOrderResponse, error) {
	out := new(FrozenReceiptOrderResponse)
	err := c.cc.Invoke(ctx, Transaction_FrozenReceiptOrderTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) UnFrozenReceiptOrderTransaction(ctx context.Context, in *UnFrozenReceiptOrderRequest, opts ...grpc.CallOption) (*UnFrozenReceiptOrderResponse, error) {
	out := new(UnFrozenReceiptOrderResponse)
	err := c.cc.Invoke(ctx, Transaction_UnFrozenReceiptOrderTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PersonalRebundTransaction_DFB(ctx context.Context, in *PersonalRebundRequest, opts ...grpc.CallOption) (*PersonalRebundResponse, error) {
	out := new(PersonalRebundResponse)
	err := c.cc.Invoke(ctx, Transaction_PersonalRebundTransaction_DFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PersonalRebundTransaction_XFB(ctx context.Context, in *PersonalRebundRequest, opts ...grpc.CallOption) (*PersonalRebundResponse, error) {
	out := new(PersonalRebundResponse)
	err := c.cc.Invoke(ctx, Transaction_PersonalRebundTransaction_XFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) RecalculateProfitTransaction(ctx context.Context, in *RecalculateProfitRequest, opts ...grpc.CallOption) (*RecalculateProfitResponse, error) {
	out := new(RecalculateProfitResponse)
	err := c.cc.Invoke(ctx, Transaction_RecalculateProfitTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) CalculateCommissionMonthAllReport(ctx context.Context, in *CalculateCommissionMonthAllRequest, opts ...grpc.CallOption) (*CalculateCommissionMonthAllResponse, error) {
	out := new(CalculateCommissionMonthAllResponse)
	err := c.cc.Invoke(ctx, Transaction_CalculateCommissionMonthAllReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) RecalculateCommissionMonthReport(ctx context.Context, in *RecalculateCommissionMonthReportRequest, opts ...grpc.CallOption) (*RecalculateCommissionMonthReportResponse, error) {
	out := new(RecalculateCommissionMonthReportResponse)
	err := c.cc.Invoke(ctx, Transaction_RecalculateCommissionMonthReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ConfirmCommissionMonthReport(ctx context.Context, in *ConfirmCommissionMonthReportRequest, opts ...grpc.CallOption) (*ConfirmCommissionMonthReportResponse, error) {
	out := new(ConfirmCommissionMonthReportResponse)
	err := c.cc.Invoke(ctx, Transaction_ConfirmCommissionMonthReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) CalculateMonthProfitReport(ctx context.Context, in *CalculateMonthProfitReportRequest, opts ...grpc.CallOption) (*CalculateMonthProfitReportResponse, error) {
	out := new(CalculateMonthProfitReportResponse)
	err := c.cc.Invoke(ctx, Transaction_CalculateMonthProfitReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) WithdrawCommissionOrderTransaction(ctx context.Context, in *WithdrawCommissionOrderRequest, opts ...grpc.CallOption) (*WithdrawCommissionOrderResponse, error) {
	out := new(WithdrawCommissionOrderResponse)
	err := c.cc.Invoke(ctx, Transaction_WithdrawCommissionOrderTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) WithdrawOrderToTest_XFB(ctx context.Context, in *WithdrawOrderTestRequest, opts ...grpc.CallOption) (*WithdrawOrderTestResponse, error) {
	out := new(WithdrawOrderTestResponse)
	err := c.cc.Invoke(ctx, Transaction_WithdrawOrderToTest_XFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) WithdrawTestToNormal_XFB(ctx context.Context, in *WithdrawOrderTestRequest, opts ...grpc.CallOption) (*WithdrawOrderTestResponse, error) {
	out := new(WithdrawOrderTestResponse)
	err := c.cc.Invoke(ctx, Transaction_WithdrawTestToNormal_XFB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServer is the server API for Transaction service.
// All implementations must embed UnimplementedTransactionServer
// for forward compatibility
type TransactionServer interface {
	MerchantBalanceUpdateTranaction(context.Context, *MerchantBalanceUpdateRequest) (*MerchantBalanceUpdateResponse, error)
	MerchantBalanceFreezeTranaction(context.Context, *MerchantBalanceFreezeRequest) (*MerchantBalanceFreezeResponse, error)
	ProxyOrderTranaction_DFB(context.Context, *ProxyOrderRequest) (*ProxyOrderResponse, error)
	ProxyOrderTranaction_XFB(context.Context, *ProxyOrderRequest) (*ProxyOrderResponse, error)
	ProxyOrderSmartTranaction_DFB(context.Context, *ProxyOrderSmartRequest) (*ProxyOrderResponse, error)
	ProxyOrderSmartTranaction_XFB(context.Context, *ProxyOrderSmartRequest) (*ProxyOrderResponse, error)
	ProxyOrderTransactionFail_DFB(context.Context, *ProxyPayFailRequest) (*ProxyPayFailResponse, error)
	ProxyOrderTransactionFail_XFB(context.Context, *ProxyPayFailRequest) (*ProxyPayFailResponse, error)
	PayOrderSwitchTest(context.Context, *PayOrderSwitchTestRequest) (*PayOrderSwitchTestResponse, error)
	ProxyOrderToTest_DFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error)
	ProxyOrderToTest_XFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error)
	ProxyTestToNormal_DFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error)
	ProxyTestToNormal_XFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error)
	PayOrderTranaction(context.Context, *PayOrderRequest) (*PayOrderResponse, error)
	InternalOrderTransaction(context.Context, *InternalOrderRequest) (*InternalOrderResponse, error)
	WithdrawOrderTransaction(context.Context, *WithdrawOrderRequest) (*WithdrawOrderResponse, error)
	PayCallBackTranaction(context.Context, *PayCallBackRequest) (*PayCallBackResponse, error)
	InternalReviewSuccessTransaction(context.Context, *InternalReviewSuccessRequest) (*InternalReviewSuccessResponse, error)
	WithdrawReviewFailTransaction(context.Context, *WithdrawReviewFailRequest) (*WithdrawReviewFailResponse, error)
	WithdrawReviewSuccessTransaction(context.Context, *WithdrawReviewSuccessRequest) (*WithdrawReviewSuccessResponse, error)
	ProxyOrderUITransaction_DFB(context.Context, *ProxyOrderUIRequest) (*ProxyOrderUIResponse, error)
	ProxyOrderUITransaction_XFB(context.Context, *ProxyOrderUIRequest) (*ProxyOrderUIResponse, error)
	MakeUpReceiptOrderTransaction(context.Context, *MakeUpReceiptOrderRequest) (*MakeUpReceiptOrderResponse, error)
	ConfirmPayOrderTransaction(context.Context, *ConfirmPayOrderRequest) (*ConfirmPayOrderResponse, error)
	ConfirmProxyPayOrderTransaction(context.Context, *ConfirmProxyPayOrderRequest) (*ConfirmProxyPayOrderResponse, error)
	RecoverReceiptOrderTransaction(context.Context, *RecoverReceiptOrderRequest) (*RecoverReceiptOrderResponse, error)
	FrozenReceiptOrderTransaction(context.Context, *FrozenReceiptOrderRequest) (*FrozenReceiptOrderResponse, error)
	UnFrozenReceiptOrderTransaction(context.Context, *UnFrozenReceiptOrderRequest) (*UnFrozenReceiptOrderResponse, error)
	PersonalRebundTransaction_DFB(context.Context, *PersonalRebundRequest) (*PersonalRebundResponse, error)
	PersonalRebundTransaction_XFB(context.Context, *PersonalRebundRequest) (*PersonalRebundResponse, error)
	RecalculateProfitTransaction(context.Context, *RecalculateProfitRequest) (*RecalculateProfitResponse, error)
	CalculateCommissionMonthAllReport(context.Context, *CalculateCommissionMonthAllRequest) (*CalculateCommissionMonthAllResponse, error)
	RecalculateCommissionMonthReport(context.Context, *RecalculateCommissionMonthReportRequest) (*RecalculateCommissionMonthReportResponse, error)
	ConfirmCommissionMonthReport(context.Context, *ConfirmCommissionMonthReportRequest) (*ConfirmCommissionMonthReportResponse, error)
	CalculateMonthProfitReport(context.Context, *CalculateMonthProfitReportRequest) (*CalculateMonthProfitReportResponse, error)
	WithdrawCommissionOrderTransaction(context.Context, *WithdrawCommissionOrderRequest) (*WithdrawCommissionOrderResponse, error)
	WithdrawOrderToTest_XFB(context.Context, *WithdrawOrderTestRequest) (*WithdrawOrderTestResponse, error)
	WithdrawTestToNormal_XFB(context.Context, *WithdrawOrderTestRequest) (*WithdrawOrderTestResponse, error)
	mustEmbedUnimplementedTransactionServer()
}

// UnimplementedTransactionServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionServer struct {
}

func (UnimplementedTransactionServer) MerchantBalanceUpdateTranaction(context.Context, *MerchantBalanceUpdateRequest) (*MerchantBalanceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantBalanceUpdateTranaction not implemented")
}
func (UnimplementedTransactionServer) MerchantBalanceFreezeTranaction(context.Context, *MerchantBalanceFreezeRequest) (*MerchantBalanceFreezeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantBalanceFreezeTranaction not implemented")
}
func (UnimplementedTransactionServer) ProxyOrderTranaction_DFB(context.Context, *ProxyOrderRequest) (*ProxyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderTranaction_DFB not implemented")
}
func (UnimplementedTransactionServer) ProxyOrderTranaction_XFB(context.Context, *ProxyOrderRequest) (*ProxyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderTranaction_XFB not implemented")
}
func (UnimplementedTransactionServer) ProxyOrderSmartTranaction_DFB(context.Context, *ProxyOrderSmartRequest) (*ProxyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderSmartTranaction_DFB not implemented")
}
func (UnimplementedTransactionServer) ProxyOrderSmartTranaction_XFB(context.Context, *ProxyOrderSmartRequest) (*ProxyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderSmartTranaction_XFB not implemented")
}
func (UnimplementedTransactionServer) ProxyOrderTransactionFail_DFB(context.Context, *ProxyPayFailRequest) (*ProxyPayFailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderTransactionFail_DFB not implemented")
}
func (UnimplementedTransactionServer) ProxyOrderTransactionFail_XFB(context.Context, *ProxyPayFailRequest) (*ProxyPayFailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderTransactionFail_XFB not implemented")
}
func (UnimplementedTransactionServer) PayOrderSwitchTest(context.Context, *PayOrderSwitchTestRequest) (*PayOrderSwitchTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOrderSwitchTest not implemented")
}
func (UnimplementedTransactionServer) ProxyOrderToTest_DFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderToTest_DFB not implemented")
}
func (UnimplementedTransactionServer) ProxyOrderToTest_XFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderToTest_XFB not implemented")
}
func (UnimplementedTransactionServer) ProxyTestToNormal_DFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyTestToNormal_DFB not implemented")
}
func (UnimplementedTransactionServer) ProxyTestToNormal_XFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyTestToNormal_XFB not implemented")
}
func (UnimplementedTransactionServer) PayOrderTranaction(context.Context, *PayOrderRequest) (*PayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOrderTranaction not implemented")
}
func (UnimplementedTransactionServer) InternalOrderTransaction(context.Context, *InternalOrderRequest) (*InternalOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalOrderTransaction not implemented")
}
func (UnimplementedTransactionServer) WithdrawOrderTransaction(context.Context, *WithdrawOrderRequest) (*WithdrawOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawOrderTransaction not implemented")
}
func (UnimplementedTransactionServer) PayCallBackTranaction(context.Context, *PayCallBackRequest) (*PayCallBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayCallBackTranaction not implemented")
}
func (UnimplementedTransactionServer) InternalReviewSuccessTransaction(context.Context, *InternalReviewSuccessRequest) (*InternalReviewSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalReviewSuccessTransaction not implemented")
}
func (UnimplementedTransactionServer) WithdrawReviewFailTransaction(context.Context, *WithdrawReviewFailRequest) (*WithdrawReviewFailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawReviewFailTransaction not implemented")
}
func (UnimplementedTransactionServer) WithdrawReviewSuccessTransaction(context.Context, *WithdrawReviewSuccessRequest) (*WithdrawReviewSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawReviewSuccessTransaction not implemented")
}
func (UnimplementedTransactionServer) ProxyOrderUITransaction_DFB(context.Context, *ProxyOrderUIRequest) (*ProxyOrderUIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderUITransaction_DFB not implemented")
}
func (UnimplementedTransactionServer) ProxyOrderUITransaction_XFB(context.Context, *ProxyOrderUIRequest) (*ProxyOrderUIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderUITransaction_XFB not implemented")
}
func (UnimplementedTransactionServer) MakeUpReceiptOrderTransaction(context.Context, *MakeUpReceiptOrderRequest) (*MakeUpReceiptOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeUpReceiptOrderTransaction not implemented")
}
func (UnimplementedTransactionServer) ConfirmPayOrderTransaction(context.Context, *ConfirmPayOrderRequest) (*ConfirmPayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmPayOrderTransaction not implemented")
}
func (UnimplementedTransactionServer) ConfirmProxyPayOrderTransaction(context.Context, *ConfirmProxyPayOrderRequest) (*ConfirmProxyPayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmProxyPayOrderTransaction not implemented")
}
func (UnimplementedTransactionServer) RecoverReceiptOrderTransaction(context.Context, *RecoverReceiptOrderRequest) (*RecoverReceiptOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverReceiptOrderTransaction not implemented")
}
func (UnimplementedTransactionServer) FrozenReceiptOrderTransaction(context.Context, *FrozenReceiptOrderRequest) (*FrozenReceiptOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrozenReceiptOrderTransaction not implemented")
}
func (UnimplementedTransactionServer) UnFrozenReceiptOrderTransaction(context.Context, *UnFrozenReceiptOrderRequest) (*UnFrozenReceiptOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFrozenReceiptOrderTransaction not implemented")
}
func (UnimplementedTransactionServer) PersonalRebundTransaction_DFB(context.Context, *PersonalRebundRequest) (*PersonalRebundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonalRebundTransaction_DFB not implemented")
}
func (UnimplementedTransactionServer) PersonalRebundTransaction_XFB(context.Context, *PersonalRebundRequest) (*PersonalRebundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonalRebundTransaction_XFB not implemented")
}
func (UnimplementedTransactionServer) RecalculateProfitTransaction(context.Context, *RecalculateProfitRequest) (*RecalculateProfitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalculateProfitTransaction not implemented")
}
func (UnimplementedTransactionServer) CalculateCommissionMonthAllReport(context.Context, *CalculateCommissionMonthAllRequest) (*CalculateCommissionMonthAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateCommissionMonthAllReport not implemented")
}
func (UnimplementedTransactionServer) RecalculateCommissionMonthReport(context.Context, *RecalculateCommissionMonthReportRequest) (*RecalculateCommissionMonthReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalculateCommissionMonthReport not implemented")
}
func (UnimplementedTransactionServer) ConfirmCommissionMonthReport(context.Context, *ConfirmCommissionMonthReportRequest) (*ConfirmCommissionMonthReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmCommissionMonthReport not implemented")
}
func (UnimplementedTransactionServer) CalculateMonthProfitReport(context.Context, *CalculateMonthProfitReportRequest) (*CalculateMonthProfitReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateMonthProfitReport not implemented")
}
func (UnimplementedTransactionServer) WithdrawCommissionOrderTransaction(context.Context, *WithdrawCommissionOrderRequest) (*WithdrawCommissionOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawCommissionOrderTransaction not implemented")
}
func (UnimplementedTransactionServer) WithdrawOrderToTest_XFB(context.Context, *WithdrawOrderTestRequest) (*WithdrawOrderTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawOrderToTest_XFB not implemented")
}
func (UnimplementedTransactionServer) WithdrawTestToNormal_XFB(context.Context, *WithdrawOrderTestRequest) (*WithdrawOrderTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawTestToNormal_XFB not implemented")
}
func (UnimplementedTransactionServer) mustEmbedUnimplementedTransactionServer() {}

// UnsafeTransactionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServer will
// result in compilation errors.
type UnsafeTransactionServer interface {
	mustEmbedUnimplementedTransactionServer()
}

func RegisterTransactionServer(s grpc.ServiceRegistrar, srv TransactionServer) {
	s.RegisterService(&Transaction_ServiceDesc, srv)
}

func _Transaction_MerchantBalanceUpdateTranaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantBalanceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).MerchantBalanceUpdateTranaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_MerchantBalanceUpdateTranaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).MerchantBalanceUpdateTranaction(ctx, req.(*MerchantBalanceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_MerchantBalanceFreezeTranaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantBalanceFreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).MerchantBalanceFreezeTranaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_MerchantBalanceFreezeTranaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).MerchantBalanceFreezeTranaction(ctx, req.(*MerchantBalanceFreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderTranaction_DFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderTranaction_DFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ProxyOrderTranaction_DFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderTranaction_DFB(ctx, req.(*ProxyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderTranaction_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderTranaction_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ProxyOrderTranaction_XFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderTranaction_XFB(ctx, req.(*ProxyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderSmartTranaction_DFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderSmartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderSmartTranaction_DFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ProxyOrderSmartTranaction_DFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderSmartTranaction_DFB(ctx, req.(*ProxyOrderSmartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderSmartTranaction_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderSmartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderSmartTranaction_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ProxyOrderSmartTranaction_XFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderSmartTranaction_XFB(ctx, req.(*ProxyOrderSmartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderTransactionFail_DFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyPayFailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderTransactionFail_DFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ProxyOrderTransactionFail_DFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderTransactionFail_DFB(ctx, req.(*ProxyPayFailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderTransactionFail_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyPayFailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderTransactionFail_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ProxyOrderTransactionFail_XFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderTransactionFail_XFB(ctx, req.(*ProxyPayFailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PayOrderSwitchTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderSwitchTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PayOrderSwitchTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_PayOrderSwitchTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PayOrderSwitchTest(ctx, req.(*PayOrderSwitchTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderToTest_DFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderToTest_DFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ProxyOrderToTest_DFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderToTest_DFB(ctx, req.(*ProxyOrderTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderToTest_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderToTest_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ProxyOrderToTest_XFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderToTest_XFB(ctx, req.(*ProxyOrderTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyTestToNormal_DFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyTestToNormal_DFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ProxyTestToNormal_DFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyTestToNormal_DFB(ctx, req.(*ProxyOrderTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyTestToNormal_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyTestToNormal_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ProxyTestToNormal_XFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyTestToNormal_XFB(ctx, req.(*ProxyOrderTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PayOrderTranaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PayOrderTranaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_PayOrderTranaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PayOrderTranaction(ctx, req.(*PayOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_InternalOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).InternalOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_InternalOrderTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).InternalOrderTransaction(ctx, req.(*InternalOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_WithdrawOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).WithdrawOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_WithdrawOrderTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).WithdrawOrderTransaction(ctx, req.(*WithdrawOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PayCallBackTranaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayCallBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PayCallBackTranaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_PayCallBackTranaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PayCallBackTranaction(ctx, req.(*PayCallBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_InternalReviewSuccessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalReviewSuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).InternalReviewSuccessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_InternalReviewSuccessTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).InternalReviewSuccessTransaction(ctx, req.(*InternalReviewSuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_WithdrawReviewFailTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawReviewFailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).WithdrawReviewFailTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_WithdrawReviewFailTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).WithdrawReviewFailTransaction(ctx, req.(*WithdrawReviewFailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_WithdrawReviewSuccessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawReviewSuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).WithdrawReviewSuccessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_WithdrawReviewSuccessTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).WithdrawReviewSuccessTransaction(ctx, req.(*WithdrawReviewSuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderUITransaction_DFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderUITransaction_DFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ProxyOrderUITransaction_DFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderUITransaction_DFB(ctx, req.(*ProxyOrderUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderUITransaction_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderUITransaction_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ProxyOrderUITransaction_XFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderUITransaction_XFB(ctx, req.(*ProxyOrderUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_MakeUpReceiptOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeUpReceiptOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).MakeUpReceiptOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_MakeUpReceiptOrderTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).MakeUpReceiptOrderTransaction(ctx, req.(*MakeUpReceiptOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ConfirmPayOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmPayOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ConfirmPayOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ConfirmPayOrderTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ConfirmPayOrderTransaction(ctx, req.(*ConfirmPayOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ConfirmProxyPayOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmProxyPayOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ConfirmProxyPayOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ConfirmProxyPayOrderTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ConfirmProxyPayOrderTransaction(ctx, req.(*ConfirmProxyPayOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_RecoverReceiptOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverReceiptOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).RecoverReceiptOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_RecoverReceiptOrderTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).RecoverReceiptOrderTransaction(ctx, req.(*RecoverReceiptOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_FrozenReceiptOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrozenReceiptOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).FrozenReceiptOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_FrozenReceiptOrderTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).FrozenReceiptOrderTransaction(ctx, req.(*FrozenReceiptOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_UnFrozenReceiptOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnFrozenReceiptOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).UnFrozenReceiptOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_UnFrozenReceiptOrderTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).UnFrozenReceiptOrderTransaction(ctx, req.(*UnFrozenReceiptOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PersonalRebundTransaction_DFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalRebundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PersonalRebundTransaction_DFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_PersonalRebundTransaction_DFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PersonalRebundTransaction_DFB(ctx, req.(*PersonalRebundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PersonalRebundTransaction_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalRebundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PersonalRebundTransaction_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_PersonalRebundTransaction_XFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PersonalRebundTransaction_XFB(ctx, req.(*PersonalRebundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_RecalculateProfitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecalculateProfitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).RecalculateProfitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_RecalculateProfitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).RecalculateProfitTransaction(ctx, req.(*RecalculateProfitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_CalculateCommissionMonthAllReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateCommissionMonthAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).CalculateCommissionMonthAllReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_CalculateCommissionMonthAllReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).CalculateCommissionMonthAllReport(ctx, req.(*CalculateCommissionMonthAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_RecalculateCommissionMonthReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecalculateCommissionMonthReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).RecalculateCommissionMonthReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_RecalculateCommissionMonthReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).RecalculateCommissionMonthReport(ctx, req.(*RecalculateCommissionMonthReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ConfirmCommissionMonthReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmCommissionMonthReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ConfirmCommissionMonthReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ConfirmCommissionMonthReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ConfirmCommissionMonthReport(ctx, req.(*ConfirmCommissionMonthReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_CalculateMonthProfitReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateMonthProfitReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).CalculateMonthProfitReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_CalculateMonthProfitReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).CalculateMonthProfitReport(ctx, req.(*CalculateMonthProfitReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_WithdrawCommissionOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawCommissionOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).WithdrawCommissionOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_WithdrawCommissionOrderTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).WithdrawCommissionOrderTransaction(ctx, req.(*WithdrawCommissionOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_WithdrawOrderToTest_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawOrderTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).WithdrawOrderToTest_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_WithdrawOrderToTest_XFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).WithdrawOrderToTest_XFB(ctx, req.(*WithdrawOrderTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_WithdrawTestToNormal_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawOrderTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).WithdrawTestToNormal_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_WithdrawTestToNormal_XFB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).WithdrawTestToNormal_XFB(ctx, req.(*WithdrawOrderTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Transaction_ServiceDesc is the grpc.ServiceDesc for Transaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.Transaction",
	HandlerType: (*TransactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MerchantBalanceUpdateTranaction",
			Handler:    _Transaction_MerchantBalanceUpdateTranaction_Handler,
		},
		{
			MethodName: "MerchantBalanceFreezeTranaction",
			Handler:    _Transaction_MerchantBalanceFreezeTranaction_Handler,
		},
		{
			MethodName: "ProxyOrderTranaction_DFB",
			Handler:    _Transaction_ProxyOrderTranaction_DFB_Handler,
		},
		{
			MethodName: "ProxyOrderTranaction_XFB",
			Handler:    _Transaction_ProxyOrderTranaction_XFB_Handler,
		},
		{
			MethodName: "ProxyOrderSmartTranaction_DFB",
			Handler:    _Transaction_ProxyOrderSmartTranaction_DFB_Handler,
		},
		{
			MethodName: "ProxyOrderSmartTranaction_XFB",
			Handler:    _Transaction_ProxyOrderSmartTranaction_XFB_Handler,
		},
		{
			MethodName: "ProxyOrderTransactionFail_DFB",
			Handler:    _Transaction_ProxyOrderTransactionFail_DFB_Handler,
		},
		{
			MethodName: "ProxyOrderTransactionFail_XFB",
			Handler:    _Transaction_ProxyOrderTransactionFail_XFB_Handler,
		},
		{
			MethodName: "PayOrderSwitchTest",
			Handler:    _Transaction_PayOrderSwitchTest_Handler,
		},
		{
			MethodName: "ProxyOrderToTest_DFB",
			Handler:    _Transaction_ProxyOrderToTest_DFB_Handler,
		},
		{
			MethodName: "ProxyOrderToTest_XFB",
			Handler:    _Transaction_ProxyOrderToTest_XFB_Handler,
		},
		{
			MethodName: "ProxyTestToNormal_DFB",
			Handler:    _Transaction_ProxyTestToNormal_DFB_Handler,
		},
		{
			MethodName: "ProxyTestToNormal_XFB",
			Handler:    _Transaction_ProxyTestToNormal_XFB_Handler,
		},
		{
			MethodName: "PayOrderTranaction",
			Handler:    _Transaction_PayOrderTranaction_Handler,
		},
		{
			MethodName: "InternalOrderTransaction",
			Handler:    _Transaction_InternalOrderTransaction_Handler,
		},
		{
			MethodName: "WithdrawOrderTransaction",
			Handler:    _Transaction_WithdrawOrderTransaction_Handler,
		},
		{
			MethodName: "PayCallBackTranaction",
			Handler:    _Transaction_PayCallBackTranaction_Handler,
		},
		{
			MethodName: "InternalReviewSuccessTransaction",
			Handler:    _Transaction_InternalReviewSuccessTransaction_Handler,
		},
		{
			MethodName: "WithdrawReviewFailTransaction",
			Handler:    _Transaction_WithdrawReviewFailTransaction_Handler,
		},
		{
			MethodName: "WithdrawReviewSuccessTransaction",
			Handler:    _Transaction_WithdrawReviewSuccessTransaction_Handler,
		},
		{
			MethodName: "ProxyOrderUITransaction_DFB",
			Handler:    _Transaction_ProxyOrderUITransaction_DFB_Handler,
		},
		{
			MethodName: "ProxyOrderUITransaction_XFB",
			Handler:    _Transaction_ProxyOrderUITransaction_XFB_Handler,
		},
		{
			MethodName: "MakeUpReceiptOrderTransaction",
			Handler:    _Transaction_MakeUpReceiptOrderTransaction_Handler,
		},
		{
			MethodName: "ConfirmPayOrderTransaction",
			Handler:    _Transaction_ConfirmPayOrderTransaction_Handler,
		},
		{
			MethodName: "ConfirmProxyPayOrderTransaction",
			Handler:    _Transaction_ConfirmProxyPayOrderTransaction_Handler,
		},
		{
			MethodName: "RecoverReceiptOrderTransaction",
			Handler:    _Transaction_RecoverReceiptOrderTransaction_Handler,
		},
		{
			MethodName: "FrozenReceiptOrderTransaction",
			Handler:    _Transaction_FrozenReceiptOrderTransaction_Handler,
		},
		{
			MethodName: "UnFrozenReceiptOrderTransaction",
			Handler:    _Transaction_UnFrozenReceiptOrderTransaction_Handler,
		},
		{
			MethodName: "PersonalRebundTransaction_DFB",
			Handler:    _Transaction_PersonalRebundTransaction_DFB_Handler,
		},
		{
			MethodName: "PersonalRebundTransaction_XFB",
			Handler:    _Transaction_PersonalRebundTransaction_XFB_Handler,
		},
		{
			MethodName: "RecalculateProfitTransaction",
			Handler:    _Transaction_RecalculateProfitTransaction_Handler,
		},
		{
			MethodName: "CalculateCommissionMonthAllReport",
			Handler:    _Transaction_CalculateCommissionMonthAllReport_Handler,
		},
		{
			MethodName: "RecalculateCommissionMonthReport",
			Handler:    _Transaction_RecalculateCommissionMonthReport_Handler,
		},
		{
			MethodName: "ConfirmCommissionMonthReport",
			Handler:    _Transaction_ConfirmCommissionMonthReport_Handler,
		},
		{
			MethodName: "CalculateMonthProfitReport",
			Handler:    _Transaction_CalculateMonthProfitReport_Handler,
		},
		{
			MethodName: "WithdrawCommissionOrderTransaction",
			Handler:    _Transaction_WithdrawCommissionOrderTransaction_Handler,
		},
		{
			MethodName: "WithdrawOrderToTest_XFB",
			Handler:    _Transaction_WithdrawOrderToTest_XFB_Handler,
		},
		{
			MethodName: "WithdrawTestToNormal_XFB",
			Handler:    _Transaction_WithdrawTestToNormal_XFB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/transaction.proto",
}
