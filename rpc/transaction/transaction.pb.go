// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: transaction.proto

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MerchantBalanceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantCode string  `protobuf:"bytes,1,opt,name=MerchantCode,proto3" json:"MerchantCode,omitempty"`
	CurrencyCode string  `protobuf:"bytes,2,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	BalanceType  string  `protobuf:"bytes,3,opt,name=BalanceType,proto3" json:"BalanceType,omitempty"`
	Comment      string  `protobuf:"bytes,4,opt,name=Comment,proto3" json:"Comment,omitempty"`
	Amount       float64 `protobuf:"fixed64,5,opt,name=Amount,proto3" json:"Amount,omitempty"`
	UserAccount  string  `protobuf:"bytes,6,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`
}

func (x *MerchantBalanceUpdateRequest) Reset() {
	*x = MerchantBalanceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantBalanceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantBalanceUpdateRequest) ProtoMessage() {}

func (x *MerchantBalanceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantBalanceUpdateRequest.ProtoReflect.Descriptor instead.
func (*MerchantBalanceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *MerchantBalanceUpdateRequest) GetMerchantCode() string {
	if x != nil {
		return x.MerchantCode
	}
	return ""
}

func (x *MerchantBalanceUpdateRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *MerchantBalanceUpdateRequest) GetBalanceType() string {
	if x != nil {
		return x.BalanceType
	}
	return ""
}

func (x *MerchantBalanceUpdateRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *MerchantBalanceUpdateRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MerchantBalanceUpdateRequest) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

type MerchantBalanceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *MerchantBalanceUpdateResponse) Reset() {
	*x = MerchantBalanceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantBalanceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantBalanceUpdateResponse) ProtoMessage() {}

func (x *MerchantBalanceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantBalanceUpdateResponse.ProtoReflect.Descriptor instead.
func (*MerchantBalanceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *MerchantBalanceUpdateResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MerchantBalanceUpdateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ProxyOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req         *ProxyPayOrderRequest `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	Rate        *CorrespondMerChnRate `protobuf:"bytes,2,opt,name=rate,proto3" json:"rate,omitempty"`
	BalanceType string                `protobuf:"bytes,3,opt,name=balanceType,proto3" json:"balanceType,omitempty"`
}

func (x *ProxyOrderRequest) Reset() {
	*x = ProxyOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyOrderRequest) ProtoMessage() {}

func (x *ProxyOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyOrderRequest.ProtoReflect.Descriptor instead.
func (*ProxyOrderRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *ProxyOrderRequest) GetReq() *ProxyPayOrderRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *ProxyOrderRequest) GetRate() *CorrespondMerChnRate {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *ProxyOrderRequest) GetBalanceType() string {
	if x != nil {
		return x.BalanceType
	}
	return ""
}

type ProxyPayFailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantCode string `protobuf:"bytes,1,opt,name=merchantCode,proto3" json:"merchantCode,omitempty"`
	OrderNo      string `protobuf:"bytes,2,opt,name=orderNo,proto3" json:"orderNo,omitempty"`
}

func (x *ProxyPayFailRequest) Reset() {
	*x = ProxyPayFailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyPayFailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyPayFailRequest) ProtoMessage() {}

func (x *ProxyPayFailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyPayFailRequest.ProtoReflect.Descriptor instead.
func (*ProxyPayFailRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *ProxyPayFailRequest) GetMerchantCode() string {
	if x != nil {
		return x.MerchantCode
	}
	return ""
}

func (x *ProxyPayFailRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

type ProxyPayFailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyOrderNo string `protobuf:"bytes,1,opt,name=ProxyOrderNo,proto3" json:"ProxyOrderNo,omitempty"`
	Code         string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Message      string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ProxyPayFailResponse) Reset() {
	*x = ProxyPayFailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyPayFailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyPayFailResponse) ProtoMessage() {}

func (x *ProxyPayFailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyPayFailResponse.ProtoReflect.Descriptor instead.
func (*ProxyPayFailResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *ProxyPayFailResponse) GetProxyOrderNo() string {
	if x != nil {
		return x.ProxyOrderNo
	}
	return ""
}

func (x *ProxyPayFailResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProxyPayFailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ProxyOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyOrderNo string `protobuf:"bytes,1,opt,name=ProxyOrderNo,proto3" json:"ProxyOrderNo,omitempty"`
	Code         string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Message      string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ProxyOrderResponse) Reset() {
	*x = ProxyOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyOrderResponse) ProtoMessage() {}

func (x *ProxyOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyOrderResponse.ProtoReflect.Descriptor instead.
func (*ProxyOrderResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *ProxyOrderResponse) GetProxyOrderNo() string {
	if x != nil {
		return x.ProxyOrderNo
	}
	return ""
}

func (x *ProxyOrderResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProxyOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PayOrderSwitchTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo     string `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	UserAccount string `protobuf:"bytes,2,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`
}

func (x *PayOrderSwitchTestRequest) Reset() {
	*x = PayOrderSwitchTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayOrderSwitchTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrderSwitchTestRequest) ProtoMessage() {}

func (x *PayOrderSwitchTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrderSwitchTestRequest.ProtoReflect.Descriptor instead.
func (*PayOrderSwitchTestRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *PayOrderSwitchTestRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *PayOrderSwitchTestRequest) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

type PayOrderSwitchTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *PayOrderSwitchTestResponse) Reset() {
	*x = PayOrderSwitchTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayOrderSwitchTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrderSwitchTestResponse) ProtoMessage() {}

func (x *PayOrderSwitchTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrderSwitchTestResponse.ProtoReflect.Descriptor instead.
func (*PayOrderSwitchTestResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *PayOrderSwitchTestResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PayOrderSwitchTestResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ProxyOrderTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyOrderNo string `protobuf:"bytes,1,opt,name=ProxyOrderNo,proto3" json:"ProxyOrderNo,omitempty"`
}

func (x *ProxyOrderTestRequest) Reset() {
	*x = ProxyOrderTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyOrderTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyOrderTestRequest) ProtoMessage() {}

func (x *ProxyOrderTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyOrderTestRequest.ProtoReflect.Descriptor instead.
func (*ProxyOrderTestRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{8}
}

func (x *ProxyOrderTestRequest) GetProxyOrderNo() string {
	if x != nil {
		return x.ProxyOrderNo
	}
	return ""
}

type ProxyOrderTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProxyOrderTestResponse) Reset() {
	*x = ProxyOrderTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyOrderTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyOrderTestResponse) ProtoMessage() {}

func (x *ProxyOrderTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyOrderTestResponse.ProtoReflect.Descriptor instead.
func (*ProxyOrderTestResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{9}
}

type ProxyPayOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessType   string  `protobuf:"bytes,1,opt,name=AccessType,proto3" json:"AccessType,omitempty"`
	MerchantId   string  `protobuf:"bytes,2,opt,name=MerchantId,proto3" json:"MerchantId,omitempty"`
	Sign         string  `protobuf:"bytes,3,opt,name=Sign,proto3" json:"Sign,omitempty"`
	NotifyUrl    string  `protobuf:"bytes,4,opt,name=NotifyUrl,proto3" json:"NotifyUrl,omitempty"`
	Language     string  `protobuf:"bytes,5,opt,name=Language,proto3" json:"Language,omitempty"`
	OrderNo      string  `protobuf:"bytes,6,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	BankId       string  `protobuf:"bytes,7,opt,name=BankId,proto3" json:"BankId,omitempty"`
	BankName     string  `protobuf:"bytes,8,opt,name=BankName,proto3" json:"BankName,omitempty"`
	BankProvince string  `protobuf:"bytes,9,opt,name=BankProvince,proto3" json:"BankProvince,omitempty"`
	BankCity     string  `protobuf:"bytes,10,opt,name=BankCity,proto3" json:"BankCity,omitempty"`
	BranchName   string  `protobuf:"bytes,11,opt,name=BranchName,proto3" json:"BranchName,omitempty"`
	BankNo       string  `protobuf:"bytes,12,opt,name=BankNo,proto3" json:"BankNo,omitempty"`
	OrderAmount  float64 `protobuf:"fixed64,13,opt,name=OrderAmount,proto3" json:"OrderAmount,omitempty"`
	DefrayName   string  `protobuf:"bytes,14,opt,name=DefrayName,proto3" json:"DefrayName,omitempty"`
	DefrayId     string  `protobuf:"bytes,15,opt,name=DefrayId,proto3" json:"DefrayId,omitempty"`
	DefrayMobile string  `protobuf:"bytes,16,opt,name=DefrayMobile,proto3" json:"DefrayMobile,omitempty"`
	DefrayEmail  string  `protobuf:"bytes,17,opt,name=DefrayEmail,proto3" json:"DefrayEmail,omitempty"`
	Currency     string  `protobuf:"bytes,18,opt,name=Currency,proto3" json:"Currency,omitempty"`
	PayTypeSubNo string  `protobuf:"bytes,19,opt,name=PayTypeSubNo,proto3" json:"PayTypeSubNo,omitempty"`
}

func (x *ProxyPayOrderRequest) Reset() {
	*x = ProxyPayOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyPayOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyPayOrderRequest) ProtoMessage() {}

func (x *ProxyPayOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyPayOrderRequest.ProtoReflect.Descriptor instead.
func (*ProxyPayOrderRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{10}
}

func (x *ProxyPayOrderRequest) GetAccessType() string {
	if x != nil {
		return x.AccessType
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetBankId() string {
	if x != nil {
		return x.BankId
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetBankProvince() string {
	if x != nil {
		return x.BankProvince
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetBankCity() string {
	if x != nil {
		return x.BankCity
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetBankNo() string {
	if x != nil {
		return x.BankNo
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetOrderAmount() float64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *ProxyPayOrderRequest) GetDefrayName() string {
	if x != nil {
		return x.DefrayName
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetDefrayId() string {
	if x != nil {
		return x.DefrayId
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetDefrayMobile() string {
	if x != nil {
		return x.DefrayMobile
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetDefrayEmail() string {
	if x != nil {
		return x.DefrayEmail
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ProxyPayOrderRequest) GetPayTypeSubNo() string {
	if x != nil {
		return x.PayTypeSubNo
	}
	return ""
}

type CorrespondMerChnRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantCode        string  `protobuf:"bytes,1,opt,name=MerchantCode,proto3" json:"MerchantCode,omitempty"`
	ChannelPayTypesCode string  `protobuf:"bytes,2,opt,name=ChannelPayTypesCode,proto3" json:"ChannelPayTypesCode,omitempty"`
	ChannelCode         string  `protobuf:"bytes,3,opt,name=ChannelCode,proto3" json:"ChannelCode,omitempty"`
	PayTypeCode         string  `protobuf:"bytes,4,opt,name=PayTypeCode,proto3" json:"PayTypeCode,omitempty"`
	Designation         string  `protobuf:"bytes,5,opt,name=Designation,proto3" json:"Designation,omitempty"`
	DesignationNo       string  `protobuf:"bytes,6,opt,name=DesignationNo,proto3" json:"DesignationNo,omitempty"`
	Fee                 float64 `protobuf:"fixed64,7,opt,name=Fee,proto3" json:"Fee,omitempty"`
	HandlingFee         float64 `protobuf:"fixed64,8,opt,name=HandlingFee,proto3" json:"HandlingFee,omitempty"`
	ChFee               float64 `protobuf:"fixed64,9,opt,name=ChFee,proto3" json:"ChFee,omitempty"`
	ChHandlingFee       float64 `protobuf:"fixed64,10,opt,name=ChHandlingFee,proto3" json:"ChHandlingFee,omitempty"`
	SingleMinCharge     float64 `protobuf:"fixed64,11,opt,name=SingleMinCharge,proto3" json:"SingleMinCharge,omitempty"`
	SingleMaxCharge     float64 `protobuf:"fixed64,12,opt,name=SingleMaxCharge,proto3" json:"SingleMaxCharge,omitempty"`
	CurrencyCode        string  `protobuf:"bytes,13,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	ApiUrl              string  `protobuf:"bytes,14,opt,name=ApiUrl,proto3" json:"ApiUrl,omitempty"`
}

func (x *CorrespondMerChnRate) Reset() {
	*x = CorrespondMerChnRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrespondMerChnRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrespondMerChnRate) ProtoMessage() {}

func (x *CorrespondMerChnRate) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrespondMerChnRate.ProtoReflect.Descriptor instead.
func (*CorrespondMerChnRate) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{11}
}

func (x *CorrespondMerChnRate) GetMerchantCode() string {
	if x != nil {
		return x.MerchantCode
	}
	return ""
}

func (x *CorrespondMerChnRate) GetChannelPayTypesCode() string {
	if x != nil {
		return x.ChannelPayTypesCode
	}
	return ""
}

func (x *CorrespondMerChnRate) GetChannelCode() string {
	if x != nil {
		return x.ChannelCode
	}
	return ""
}

func (x *CorrespondMerChnRate) GetPayTypeCode() string {
	if x != nil {
		return x.PayTypeCode
	}
	return ""
}

func (x *CorrespondMerChnRate) GetDesignation() string {
	if x != nil {
		return x.Designation
	}
	return ""
}

func (x *CorrespondMerChnRate) GetDesignationNo() string {
	if x != nil {
		return x.DesignationNo
	}
	return ""
}

func (x *CorrespondMerChnRate) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *CorrespondMerChnRate) GetHandlingFee() float64 {
	if x != nil {
		return x.HandlingFee
	}
	return 0
}

func (x *CorrespondMerChnRate) GetChFee() float64 {
	if x != nil {
		return x.ChFee
	}
	return 0
}

func (x *CorrespondMerChnRate) GetChHandlingFee() float64 {
	if x != nil {
		return x.ChHandlingFee
	}
	return 0
}

func (x *CorrespondMerChnRate) GetSingleMinCharge() float64 {
	if x != nil {
		return x.SingleMinCharge
	}
	return 0
}

func (x *CorrespondMerChnRate) GetSingleMaxCharge() float64 {
	if x != nil {
		return x.SingleMaxCharge
	}
	return 0
}

func (x *CorrespondMerChnRate) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *CorrespondMerChnRate) GetApiUrl() string {
	if x != nil {
		return x.ApiUrl
	}
	return ""
}

type PayOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayOrder       *PayOrder             `protobuf:"bytes,1,opt,name=payOrder,proto3" json:"payOrder,omitempty"`
	Rate           *CorrespondMerChnRate `protobuf:"bytes,2,opt,name=Rate,proto3" json:"Rate,omitempty"`
	OrderNo        string                `protobuf:"bytes,3,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	ChannelOrderNo string                `protobuf:"bytes,4,opt,name=ChannelOrderNo,proto3" json:"ChannelOrderNo,omitempty"`
}

func (x *PayOrderRequest) Reset() {
	*x = PayOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrderRequest) ProtoMessage() {}

func (x *PayOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrderRequest.ProtoReflect.Descriptor instead.
func (*PayOrderRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{12}
}

func (x *PayOrderRequest) GetPayOrder() *PayOrder {
	if x != nil {
		return x.PayOrder
	}
	return nil
}

func (x *PayOrderRequest) GetRate() *CorrespondMerChnRate {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *PayOrderRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *PayOrderRequest) GetChannelOrderNo() string {
	if x != nil {
		return x.ChannelOrderNo
	}
	return ""
}

type PayOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	PayOrderNo string `protobuf:"bytes,3,opt,name=PayOrderNo,proto3" json:"PayOrderNo,omitempty"`
}

func (x *PayOrderResponse) Reset() {
	*x = PayOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrderResponse) ProtoMessage() {}

func (x *PayOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrderResponse.ProtoReflect.Descriptor instead.
func (*PayOrderResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{13}
}

func (x *PayOrderResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PayOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PayOrderResponse) GetPayOrderNo() string {
	if x != nil {
		return x.PayOrderNo
	}
	return ""
}

type PayOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessType    string `protobuf:"bytes,1,opt,name=AccessType,proto3" json:"AccessType,omitempty"`
	MerchantId    string `protobuf:"bytes,2,opt,name=MerchantId,proto3" json:"MerchantId,omitempty"`
	NotifyUrl     string `protobuf:"bytes,3,opt,name=NotifyUrl,proto3" json:"NotifyUrl,omitempty"`
	PageUrl       string `protobuf:"bytes,4,opt,name=PageUrl,proto3" json:"PageUrl,omitempty"`
	Language      string `protobuf:"bytes,5,opt,name=Language,proto3" json:"Language,omitempty"`
	Sign          string `protobuf:"bytes,6,opt,name=Sign,proto3" json:"Sign,omitempty"`
	JumpType      string `protobuf:"bytes,7,opt,name=JumpType,proto3" json:"JumpType,omitempty"`
	LoginType     string `protobuf:"bytes,8,opt,name=LoginType,proto3" json:"LoginType,omitempty"`
	OrderNo       string `protobuf:"bytes,9,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	OrderAmount   string `protobuf:"bytes,10,opt,name=OrderAmount,proto3" json:"OrderAmount,omitempty"`
	Currency      string `protobuf:"bytes,11,opt,name=Currency,proto3" json:"Currency,omitempty"`
	PayType       string `protobuf:"bytes,12,opt,name=PayType,proto3" json:"PayType,omitempty"`
	OrderTime     string `protobuf:"bytes,13,opt,name=OrderTime,proto3" json:"OrderTime,omitempty"`
	OrderName     string `protobuf:"bytes,14,opt,name=OrderName,proto3" json:"OrderName,omitempty"`
	BankCode      string `protobuf:"bytes,15,opt,name=BankCode,proto3" json:"BankCode,omitempty"`
	Phone         string `protobuf:"bytes,16,opt,name=Phone,proto3" json:"Phone,omitempty"`
	PayTypeNo     string `protobuf:"bytes,17,opt,name=PayTypeNo,proto3" json:"PayTypeNo,omitempty"`
	UserId        string `protobuf:"bytes,18,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MerchantLevel string `protobuf:"bytes,19,opt,name=MerchantLevel,proto3" json:"MerchantLevel,omitempty"`
	UserIp        string `protobuf:"bytes,20,opt,name=UserIp,proto3" json:"UserIp,omitempty"`
}

func (x *PayOrder) Reset() {
	*x = PayOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrder) ProtoMessage() {}

func (x *PayOrder) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrder.ProtoReflect.Descriptor instead.
func (*PayOrder) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{14}
}

func (x *PayOrder) GetAccessType() string {
	if x != nil {
		return x.AccessType
	}
	return ""
}

func (x *PayOrder) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *PayOrder) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *PayOrder) GetPageUrl() string {
	if x != nil {
		return x.PageUrl
	}
	return ""
}

func (x *PayOrder) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *PayOrder) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *PayOrder) GetJumpType() string {
	if x != nil {
		return x.JumpType
	}
	return ""
}

func (x *PayOrder) GetLoginType() string {
	if x != nil {
		return x.LoginType
	}
	return ""
}

func (x *PayOrder) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *PayOrder) GetOrderAmount() string {
	if x != nil {
		return x.OrderAmount
	}
	return ""
}

func (x *PayOrder) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PayOrder) GetPayType() string {
	if x != nil {
		return x.PayType
	}
	return ""
}

func (x *PayOrder) GetOrderTime() string {
	if x != nil {
		return x.OrderTime
	}
	return ""
}

func (x *PayOrder) GetOrderName() string {
	if x != nil {
		return x.OrderName
	}
	return ""
}

func (x *PayOrder) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *PayOrder) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PayOrder) GetPayTypeNo() string {
	if x != nil {
		return x.PayTypeNo
	}
	return ""
}

func (x *PayOrder) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PayOrder) GetMerchantLevel() string {
	if x != nil {
		return x.MerchantLevel
	}
	return ""
}

func (x *PayOrder) GetUserIp() string {
	if x != nil {
		return x.UserIp
	}
	return ""
}

type InternalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalOrder             *InternalOrder             `protobuf:"bytes,1,opt,name=internalOrder,proto3" json:"internalOrder,omitempty"`
	MerchantOrderRateListView *MerchantOrderRateListView `protobuf:"bytes,2,opt,name=merchantOrderRateListView,proto3" json:"merchantOrderRateListView,omitempty"`
}

func (x *InternalOrderRequest) Reset() {
	*x = InternalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalOrderRequest) ProtoMessage() {}

func (x *InternalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalOrderRequest.ProtoReflect.Descriptor instead.
func (*InternalOrderRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{15}
}

func (x *InternalOrderRequest) GetInternalOrder() *InternalOrder {
	if x != nil {
		return x.InternalOrder
	}
	return nil
}

func (x *InternalOrderRequest) GetMerchantOrderRateListView() *MerchantOrderRateListView {
	if x != nil {
		return x.MerchantOrderRateListView
	}
	return nil
}

type InternalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo string `protobuf:"bytes,1,opt,name=orderNo,proto3" json:"orderNo,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *InternalOrderResponse) Reset() {
	*x = InternalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalOrderResponse) ProtoMessage() {}

func (x *InternalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalOrderResponse.ProtoReflect.Descriptor instead.
func (*InternalOrderResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{16}
}

func (x *InternalOrderResponse) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *InternalOrderResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *InternalOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type InternalOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imgurl               string  `protobuf:"bytes,1,opt,name=Imgurl,proto3" json:"Imgurl,omitempty"`
	MerchantCode         string  `protobuf:"bytes,2,opt,name=MerchantCode,proto3" json:"MerchantCode,omitempty"`
	UserAccount          string  `protobuf:"bytes,3,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`
	OrderAmount          float64 `protobuf:"fixed64,4,opt,name=OrderAmount,proto3" json:"OrderAmount,omitempty"`
	CurrencyCode         string  `protobuf:"bytes,5,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	MerchantAccountName  string  `protobuf:"bytes,6,opt,name=MerchantAccountName,proto3" json:"MerchantAccountName,omitempty"`
	MerchantBankAccount  string  `protobuf:"bytes,7,opt,name=MerchantBankAccount,proto3" json:"MerchantBankAccount,omitempty"`
	MerchantBankCity     string  `protobuf:"bytes,8,opt,name=MerchantBankCity,proto3" json:"MerchantBankCity,omitempty"`
	MerchantBankProvince string  `protobuf:"bytes,9,opt,name=merchantBankProvince,proto3" json:"merchantBankProvince,omitempty"`
	MerchantBankNo       string  `protobuf:"bytes,10,opt,name=MerchantBankNo,proto3" json:"MerchantBankNo,omitempty"`
	MerchantBankName     string  `protobuf:"bytes,11,opt,name=MerchantBankName,proto3" json:"MerchantBankName,omitempty"`
	ChannelBankName      string  `protobuf:"bytes,12,opt,name=ChannelBankName,proto3" json:"ChannelBankName,omitempty"`
	ChannelAccountName   string  `protobuf:"bytes,13,opt,name=ChannelAccountName,proto3" json:"ChannelAccountName,omitempty"`
	ChannelBankAccount   string  `protobuf:"bytes,14,opt,name=ChannelBankAccount,proto3" json:"ChannelBankAccount,omitempty"`
	ChannelBankNo        string  `protobuf:"bytes,15,opt,name=ChannelBankNo,proto3" json:"ChannelBankNo,omitempty"`
}

func (x *InternalOrder) Reset() {
	*x = InternalOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalOrder) ProtoMessage() {}

func (x *InternalOrder) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalOrder.ProtoReflect.Descriptor instead.
func (*InternalOrder) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{17}
}

func (x *InternalOrder) GetImgurl() string {
	if x != nil {
		return x.Imgurl
	}
	return ""
}

func (x *InternalOrder) GetMerchantCode() string {
	if x != nil {
		return x.MerchantCode
	}
	return ""
}

func (x *InternalOrder) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *InternalOrder) GetOrderAmount() float64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *InternalOrder) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *InternalOrder) GetMerchantAccountName() string {
	if x != nil {
		return x.MerchantAccountName
	}
	return ""
}

func (x *InternalOrder) GetMerchantBankAccount() string {
	if x != nil {
		return x.MerchantBankAccount
	}
	return ""
}

func (x *InternalOrder) GetMerchantBankCity() string {
	if x != nil {
		return x.MerchantBankCity
	}
	return ""
}

func (x *InternalOrder) GetMerchantBankProvince() string {
	if x != nil {
		return x.MerchantBankProvince
	}
	return ""
}

func (x *InternalOrder) GetMerchantBankNo() string {
	if x != nil {
		return x.MerchantBankNo
	}
	return ""
}

func (x *InternalOrder) GetMerchantBankName() string {
	if x != nil {
		return x.MerchantBankName
	}
	return ""
}

func (x *InternalOrder) GetChannelBankName() string {
	if x != nil {
		return x.ChannelBankName
	}
	return ""
}

func (x *InternalOrder) GetChannelAccountName() string {
	if x != nil {
		return x.ChannelAccountName
	}
	return ""
}

func (x *InternalOrder) GetChannelBankAccount() string {
	if x != nil {
		return x.ChannelBankAccount
	}
	return ""
}

func (x *InternalOrder) GetChannelBankNo() string {
	if x != nil {
		return x.ChannelBankNo
	}
	return ""
}

type MerchantOrderRateListView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelPayTypesCode string  `protobuf:"bytes,1,opt,name=ChannelPayTypesCode,proto3" json:"ChannelPayTypesCode,omitempty"`
	PayTypeCode         string  `protobuf:"bytes,2,opt,name=PayTypeCode,proto3" json:"PayTypeCode,omitempty"`
	MerHandlingFee      float64 `protobuf:"fixed64,3,opt,name=MerHandlingFee,proto3" json:"MerHandlingFee,omitempty"`
	MerFee              float64 `protobuf:"fixed64,4,opt,name=MerFee,proto3" json:"MerFee,omitempty"`
	Designation         string  `protobuf:"bytes,5,opt,name=Designation,proto3" json:"Designation,omitempty"`
	DesignationNo       string  `protobuf:"bytes,6,opt,name=DesignationNo,proto3" json:"DesignationNo,omitempty"`
	ChannelCode         string  `protobuf:"bytes,7,opt,name=ChannelCode,proto3" json:"ChannelCode,omitempty"`
	CurrencyCode        string  `protobuf:"bytes,8,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	MaxInternalCharge   float64 `protobuf:"fixed64,9,opt,name=MaxInternalCharge,proto3" json:"MaxInternalCharge,omitempty"`
	SingleMinCharge     float64 `protobuf:"fixed64,10,opt,name=SingleMinCharge,proto3" json:"SingleMinCharge,omitempty"`
	SingleMaxCharge     float64 `protobuf:"fixed64,11,opt,name=SingleMaxCharge,proto3" json:"SingleMaxCharge,omitempty"`
	MerchantCode        string  `protobuf:"bytes,12,opt,name=MerchantCode,proto3" json:"MerchantCode,omitempty"`
	MerchnrateStatus    string  `protobuf:"bytes,13,opt,name=MerchnrateStatus,proto3" json:"MerchnrateStatus,omitempty"`
	ChnStatus           string  `protobuf:"bytes,14,opt,name=ChnStatus,proto3" json:"ChnStatus,omitempty"`
	ChnIsProxy          string  `protobuf:"bytes,15,opt,name=ChnIsProxy,proto3" json:"ChnIsProxy,omitempty"`
	CptStatus           string  `protobuf:"bytes,16,opt,name=CptStatus,proto3" json:"CptStatus,omitempty"`
	CptFee              float64 `protobuf:"fixed64,17,opt,name=CptFee,proto3" json:"CptFee,omitempty"`
	CptHandlingFee      float64 `protobuf:"fixed64,18,opt,name=CptHandlingFee,proto3" json:"CptHandlingFee,omitempty"`
}

func (x *MerchantOrderRateListView) Reset() {
	*x = MerchantOrderRateListView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantOrderRateListView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantOrderRateListView) ProtoMessage() {}

func (x *MerchantOrderRateListView) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantOrderRateListView.ProtoReflect.Descriptor instead.
func (*MerchantOrderRateListView) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{18}
}

func (x *MerchantOrderRateListView) GetChannelPayTypesCode() string {
	if x != nil {
		return x.ChannelPayTypesCode
	}
	return ""
}

func (x *MerchantOrderRateListView) GetPayTypeCode() string {
	if x != nil {
		return x.PayTypeCode
	}
	return ""
}

func (x *MerchantOrderRateListView) GetMerHandlingFee() float64 {
	if x != nil {
		return x.MerHandlingFee
	}
	return 0
}

func (x *MerchantOrderRateListView) GetMerFee() float64 {
	if x != nil {
		return x.MerFee
	}
	return 0
}

func (x *MerchantOrderRateListView) GetDesignation() string {
	if x != nil {
		return x.Designation
	}
	return ""
}

func (x *MerchantOrderRateListView) GetDesignationNo() string {
	if x != nil {
		return x.DesignationNo
	}
	return ""
}

func (x *MerchantOrderRateListView) GetChannelCode() string {
	if x != nil {
		return x.ChannelCode
	}
	return ""
}

func (x *MerchantOrderRateListView) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *MerchantOrderRateListView) GetMaxInternalCharge() float64 {
	if x != nil {
		return x.MaxInternalCharge
	}
	return 0
}

func (x *MerchantOrderRateListView) GetSingleMinCharge() float64 {
	if x != nil {
		return x.SingleMinCharge
	}
	return 0
}

func (x *MerchantOrderRateListView) GetSingleMaxCharge() float64 {
	if x != nil {
		return x.SingleMaxCharge
	}
	return 0
}

func (x *MerchantOrderRateListView) GetMerchantCode() string {
	if x != nil {
		return x.MerchantCode
	}
	return ""
}

func (x *MerchantOrderRateListView) GetMerchnrateStatus() string {
	if x != nil {
		return x.MerchnrateStatus
	}
	return ""
}

func (x *MerchantOrderRateListView) GetChnStatus() string {
	if x != nil {
		return x.ChnStatus
	}
	return ""
}

func (x *MerchantOrderRateListView) GetChnIsProxy() string {
	if x != nil {
		return x.ChnIsProxy
	}
	return ""
}

func (x *MerchantOrderRateListView) GetCptStatus() string {
	if x != nil {
		return x.CptStatus
	}
	return ""
}

func (x *MerchantOrderRateListView) GetCptFee() float64 {
	if x != nil {
		return x.CptFee
	}
	return 0
}

func (x *MerchantOrderRateListView) GetCptHandlingFee() float64 {
	if x != nil {
		return x.CptHandlingFee
	}
	return 0
}

type WithdrawOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantCode         string  `protobuf:"bytes,1,opt,name=MerchantCode,proto3" json:"MerchantCode,omitempty"`
	UserAccount          string  `protobuf:"bytes,2,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`
	MerchantAccountName  string  `protobuf:"bytes,3,opt,name=MerchantAccountName,proto3" json:"MerchantAccountName,omitempty"`
	MerchantBankeAccount string  `protobuf:"bytes,4,opt,name=MerchantBankeAccount,proto3" json:"MerchantBankeAccount,omitempty"`
	MerchantBankNo       string  `protobuf:"bytes,5,opt,name=MerchantBankNo,proto3" json:"MerchantBankNo,omitempty"`
	MerchantBankName     string  `protobuf:"bytes,6,opt,name=MerchantBankName,proto3" json:"MerchantBankName,omitempty"`
	MerchantBankProvince string  `protobuf:"bytes,7,opt,name=MerchantBankProvince,proto3" json:"MerchantBankProvince,omitempty"`
	MerchantBankCity     string  `protobuf:"bytes,8,opt,name=MerchantBankCity,proto3" json:"MerchantBankCity,omitempty"`
	CurrencyCode         string  `protobuf:"bytes,9,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	OrderAmount          float64 `protobuf:"fixed64,10,opt,name=OrderAmount,proto3" json:"OrderAmount,omitempty"`
	OrderNo              string  `protobuf:"bytes,11,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	HandlingFee          float64 `protobuf:"fixed64,12,opt,name=HandlingFee,proto3" json:"HandlingFee,omitempty"`
	Source               string  `protobuf:"bytes,13,opt,name=Source,proto3" json:"Source,omitempty"`
	MerchantOrderNo      string  `protobuf:"bytes,14,opt,name=MerchantOrderNo,proto3" json:"MerchantOrderNo,omitempty"`
	NotifyUrl            string  `protobuf:"bytes,15,opt,name=NotifyUrl,proto3" json:"NotifyUrl,omitempty"`
	PageUrl              string  `protobuf:"bytes,16,opt,name=PageUrl,proto3" json:"PageUrl,omitempty"`
	Memo                 string  `protobuf:"bytes,17,opt,name=Memo,proto3" json:"Memo,omitempty"`
	ChangeType           string  `protobuf:"bytes,18,opt,name=ChangeType,proto3" json:"ChangeType,omitempty"`
}

func (x *WithdrawOrderRequest) Reset() {
	*x = WithdrawOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawOrderRequest) ProtoMessage() {}

func (x *WithdrawOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawOrderRequest.ProtoReflect.Descriptor instead.
func (*WithdrawOrderRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{19}
}

func (x *WithdrawOrderRequest) GetMerchantCode() string {
	if x != nil {
		return x.MerchantCode
	}
	return ""
}

func (x *WithdrawOrderRequest) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *WithdrawOrderRequest) GetMerchantAccountName() string {
	if x != nil {
		return x.MerchantAccountName
	}
	return ""
}

func (x *WithdrawOrderRequest) GetMerchantBankeAccount() string {
	if x != nil {
		return x.MerchantBankeAccount
	}
	return ""
}

func (x *WithdrawOrderRequest) GetMerchantBankNo() string {
	if x != nil {
		return x.MerchantBankNo
	}
	return ""
}

func (x *WithdrawOrderRequest) GetMerchantBankName() string {
	if x != nil {
		return x.MerchantBankName
	}
	return ""
}

func (x *WithdrawOrderRequest) GetMerchantBankProvince() string {
	if x != nil {
		return x.MerchantBankProvince
	}
	return ""
}

func (x *WithdrawOrderRequest) GetMerchantBankCity() string {
	if x != nil {
		return x.MerchantBankCity
	}
	return ""
}

func (x *WithdrawOrderRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *WithdrawOrderRequest) GetOrderAmount() float64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *WithdrawOrderRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *WithdrawOrderRequest) GetHandlingFee() float64 {
	if x != nil {
		return x.HandlingFee
	}
	return 0
}

func (x *WithdrawOrderRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *WithdrawOrderRequest) GetMerchantOrderNo() string {
	if x != nil {
		return x.MerchantOrderNo
	}
	return ""
}

func (x *WithdrawOrderRequest) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *WithdrawOrderRequest) GetPageUrl() string {
	if x != nil {
		return x.PageUrl
	}
	return ""
}

func (x *WithdrawOrderRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *WithdrawOrderRequest) GetChangeType() string {
	if x != nil {
		return x.ChangeType
	}
	return ""
}

type WithdrawOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo string `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *WithdrawOrderResponse) Reset() {
	*x = WithdrawOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawOrderResponse) ProtoMessage() {}

func (x *WithdrawOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawOrderResponse.ProtoReflect.Descriptor instead.
func (*WithdrawOrderResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{20}
}

func (x *WithdrawOrderResponse) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *WithdrawOrderResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WithdrawOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PayCallBackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallbackTime   string  `protobuf:"bytes,1,opt,name=CallbackTime,proto3" json:"CallbackTime,omitempty"`
	ChannelOrderNo string  `protobuf:"bytes,2,opt,name=ChannelOrderNo,proto3" json:"ChannelOrderNo,omitempty"`
	OrderAmount    float64 `protobuf:"fixed64,3,opt,name=OrderAmount,proto3" json:"OrderAmount,omitempty"`
	OrderStatus    string  `protobuf:"bytes,4,opt,name=OrderStatus,proto3" json:"OrderStatus,omitempty"`
	PayOrderNo     string  `protobuf:"bytes,5,opt,name=PayOrderNo,proto3" json:"PayOrderNo,omitempty"`
}

func (x *PayCallBackRequest) Reset() {
	*x = PayCallBackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayCallBackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayCallBackRequest) ProtoMessage() {}

func (x *PayCallBackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayCallBackRequest.ProtoReflect.Descriptor instead.
func (*PayCallBackRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{21}
}

func (x *PayCallBackRequest) GetCallbackTime() string {
	if x != nil {
		return x.CallbackTime
	}
	return ""
}

func (x *PayCallBackRequest) GetChannelOrderNo() string {
	if x != nil {
		return x.ChannelOrderNo
	}
	return ""
}

func (x *PayCallBackRequest) GetOrderAmount() float64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *PayCallBackRequest) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

func (x *PayCallBackRequest) GetPayOrderNo() string {
	if x != nil {
		return x.PayOrderNo
	}
	return ""
}

type PayCallBackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                string  `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message             string  `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	MerchantCode        string  `protobuf:"bytes,3,opt,name=MerchantCode,proto3" json:"MerchantCode,omitempty"`
	MerchantOrderNo     string  `protobuf:"bytes,4,opt,name=MerchantOrderNo,proto3" json:"MerchantOrderNo,omitempty"`
	OrderNo             string  `protobuf:"bytes,5,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	OrderAmount         float64 `protobuf:"fixed64,6,opt,name=OrderAmount,proto3" json:"OrderAmount,omitempty"`
	ActualAmount        float64 `protobuf:"fixed64,7,opt,name=ActualAmount,proto3" json:"ActualAmount,omitempty"`
	TransferHandlingFee float64 `protobuf:"fixed64,8,opt,name=TransferHandlingFee,proto3" json:"TransferHandlingFee,omitempty"`
	NotifyUrl           string  `protobuf:"bytes,9,opt,name=NotifyUrl,proto3" json:"NotifyUrl,omitempty"`
	OrderTime           string  `protobuf:"bytes,10,opt,name=OrderTime,proto3" json:"OrderTime,omitempty"`
	PayOrderTime        string  `protobuf:"bytes,11,opt,name=PayOrderTime,proto3" json:"PayOrderTime,omitempty"`
	Status              string  `protobuf:"bytes,12,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *PayCallBackResponse) Reset() {
	*x = PayCallBackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayCallBackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayCallBackResponse) ProtoMessage() {}

func (x *PayCallBackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayCallBackResponse.ProtoReflect.Descriptor instead.
func (*PayCallBackResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{22}
}

func (x *PayCallBackResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PayCallBackResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PayCallBackResponse) GetMerchantCode() string {
	if x != nil {
		return x.MerchantCode
	}
	return ""
}

func (x *PayCallBackResponse) GetMerchantOrderNo() string {
	if x != nil {
		return x.MerchantOrderNo
	}
	return ""
}

func (x *PayCallBackResponse) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *PayCallBackResponse) GetOrderAmount() float64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *PayCallBackResponse) GetActualAmount() float64 {
	if x != nil {
		return x.ActualAmount
	}
	return 0
}

func (x *PayCallBackResponse) GetTransferHandlingFee() float64 {
	if x != nil {
		return x.TransferHandlingFee
	}
	return 0
}

func (x *PayCallBackResponse) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *PayCallBackResponse) GetOrderTime() string {
	if x != nil {
		return x.OrderTime
	}
	return ""
}

func (x *PayCallBackResponse) GetPayOrderTime() string {
	if x != nil {
		return x.PayOrderTime
	}
	return ""
}

func (x *PayCallBackResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type InternalReviewSuccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo     string `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	UserAccount string `protobuf:"bytes,2,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`
}

func (x *InternalReviewSuccessRequest) Reset() {
	*x = InternalReviewSuccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalReviewSuccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalReviewSuccessRequest) ProtoMessage() {}

func (x *InternalReviewSuccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalReviewSuccessRequest.ProtoReflect.Descriptor instead.
func (*InternalReviewSuccessRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{23}
}

func (x *InternalReviewSuccessRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *InternalReviewSuccessRequest) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

type InternalReviewSuccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo string `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *InternalReviewSuccessResponse) Reset() {
	*x = InternalReviewSuccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalReviewSuccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalReviewSuccessResponse) ProtoMessage() {}

func (x *InternalReviewSuccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalReviewSuccessResponse.ProtoReflect.Descriptor instead.
func (*InternalReviewSuccessResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{24}
}

func (x *InternalReviewSuccessResponse) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *InternalReviewSuccessResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *InternalReviewSuccessResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type WithdrawReviewFailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo     string `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	UserAccount string `protobuf:"bytes,2,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`
	Memo        string `protobuf:"bytes,3,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *WithdrawReviewFailRequest) Reset() {
	*x = WithdrawReviewFailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawReviewFailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawReviewFailRequest) ProtoMessage() {}

func (x *WithdrawReviewFailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawReviewFailRequest.ProtoReflect.Descriptor instead.
func (*WithdrawReviewFailRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{25}
}

func (x *WithdrawReviewFailRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *WithdrawReviewFailRequest) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *WithdrawReviewFailRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type WithdrawReviewFailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo string `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *WithdrawReviewFailResponse) Reset() {
	*x = WithdrawReviewFailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawReviewFailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawReviewFailResponse) ProtoMessage() {}

func (x *WithdrawReviewFailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawReviewFailResponse.ProtoReflect.Descriptor instead.
func (*WithdrawReviewFailResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{26}
}

func (x *WithdrawReviewFailResponse) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *WithdrawReviewFailResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WithdrawReviewFailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type WithdrawReviewSuccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo         string             `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	UserAccount     string             `protobuf:"bytes,2,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`
	ChannelWithdraw []*ChannelWithdraw `protobuf:"bytes,3,rep,name=channelWithdraw,proto3" json:"channelWithdraw,omitempty"`
}

func (x *WithdrawReviewSuccessRequest) Reset() {
	*x = WithdrawReviewSuccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawReviewSuccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawReviewSuccessRequest) ProtoMessage() {}

func (x *WithdrawReviewSuccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawReviewSuccessRequest.ProtoReflect.Descriptor instead.
func (*WithdrawReviewSuccessRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{27}
}

func (x *WithdrawReviewSuccessRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *WithdrawReviewSuccessRequest) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *WithdrawReviewSuccessRequest) GetChannelWithdraw() []*ChannelWithdraw {
	if x != nil {
		return x.ChannelWithdraw
	}
	return nil
}

type WithdrawReviewSuccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo string `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *WithdrawReviewSuccessResponse) Reset() {
	*x = WithdrawReviewSuccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawReviewSuccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawReviewSuccessResponse) ProtoMessage() {}

func (x *WithdrawReviewSuccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawReviewSuccessResponse.ProtoReflect.Descriptor instead.
func (*WithdrawReviewSuccessResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{28}
}

func (x *WithdrawReviewSuccessResponse) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *WithdrawReviewSuccessResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WithdrawReviewSuccessResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ChannelWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelCode    string  `protobuf:"bytes,1,opt,name=ChannelCode,proto3" json:"ChannelCode,omitempty"`
	WithdrawAmount float64 `protobuf:"fixed64,2,opt,name=WithdrawAmount,proto3" json:"WithdrawAmount,omitempty"`
}

func (x *ChannelWithdraw) Reset() {
	*x = ChannelWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelWithdraw) ProtoMessage() {}

func (x *ChannelWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelWithdraw.ProtoReflect.Descriptor instead.
func (*ChannelWithdraw) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{29}
}

func (x *ChannelWithdraw) GetChannelCode() string {
	if x != nil {
		return x.ChannelCode
	}
	return ""
}

func (x *ChannelWithdraw) GetWithdrawAmount() float64 {
	if x != nil {
		return x.WithdrawAmount
	}
	return 0
}

type ProxyOrderUIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyOrderUI              *ProxyOrderUI              `protobuf:"bytes,1,opt,name=proxyOrderUI,proto3" json:"proxyOrderUI,omitempty"`
	MerchantOrderRateListView *MerchantOrderRateListView `protobuf:"bytes,2,opt,name=merchantOrderRateListView,proto3" json:"merchantOrderRateListView,omitempty"`
}

func (x *ProxyOrderUIRequest) Reset() {
	*x = ProxyOrderUIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyOrderUIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyOrderUIRequest) ProtoMessage() {}

func (x *ProxyOrderUIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyOrderUIRequest.ProtoReflect.Descriptor instead.
func (*ProxyOrderUIRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{30}
}

func (x *ProxyOrderUIRequest) GetProxyOrderUI() *ProxyOrderUI {
	if x != nil {
		return x.ProxyOrderUI
	}
	return nil
}

func (x *ProxyOrderUIRequest) GetMerchantOrderRateListView() *MerchantOrderRateListView {
	if x != nil {
		return x.MerchantOrderRateListView
	}
	return nil
}

type ProxyOrderUIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyOrderNo string `protobuf:"bytes,1,opt,name=ProxyOrderNo,proto3" json:"ProxyOrderNo,omitempty"`
	Code         string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Message      string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ProxyOrderUIResponse) Reset() {
	*x = ProxyOrderUIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyOrderUIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyOrderUIResponse) ProtoMessage() {}

func (x *ProxyOrderUIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyOrderUIResponse.ProtoReflect.Descriptor instead.
func (*ProxyOrderUIResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{31}
}

func (x *ProxyOrderUIResponse) GetProxyOrderNo() string {
	if x != nil {
		return x.ProxyOrderNo
	}
	return ""
}

func (x *ProxyOrderUIResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProxyOrderUIResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ProxyOrderUI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantCode         string  `protobuf:"bytes,1,opt,name=MerchantCode,proto3" json:"MerchantCode,omitempty"`
	UserAccount          string  `protobuf:"bytes,2,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`
	OrderNo              string  `protobuf:"bytes,3,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	OrderAmount          float64 `protobuf:"fixed64,4,opt,name=OrderAmount,proto3" json:"OrderAmount,omitempty"`
	MerchantBankAccount  string  `protobuf:"bytes,5,opt,name=MerchantBankAccount,proto3" json:"MerchantBankAccount,omitempty"`
	MerchantBankNo       string  `protobuf:"bytes,6,opt,name=MerchantBankNo,proto3" json:"MerchantBankNo,omitempty"`
	MerchantBankName     string  `protobuf:"bytes,7,opt,name=MerchantBankName,proto3" json:"MerchantBankName,omitempty"`
	MerchantAccountName  string  `protobuf:"bytes,8,opt,name=MerchantAccountName,proto3" json:"MerchantAccountName,omitempty"`
	MerchantBankProvince string  `protobuf:"bytes,9,opt,name=MerchantBankProvince,proto3" json:"MerchantBankProvince,omitempty"`
	MerchantBankCity     string  `protobuf:"bytes,10,opt,name=MerchantBankCity,proto3" json:"MerchantBankCity,omitempty"`
	CurrencyCode         string  `protobuf:"bytes,11,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
}

func (x *ProxyOrderUI) Reset() {
	*x = ProxyOrderUI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyOrderUI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyOrderUI) ProtoMessage() {}

func (x *ProxyOrderUI) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyOrderUI.ProtoReflect.Descriptor instead.
func (*ProxyOrderUI) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{32}
}

func (x *ProxyOrderUI) GetMerchantCode() string {
	if x != nil {
		return x.MerchantCode
	}
	return ""
}

func (x *ProxyOrderUI) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *ProxyOrderUI) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ProxyOrderUI) GetOrderAmount() float64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *ProxyOrderUI) GetMerchantBankAccount() string {
	if x != nil {
		return x.MerchantBankAccount
	}
	return ""
}

func (x *ProxyOrderUI) GetMerchantBankNo() string {
	if x != nil {
		return x.MerchantBankNo
	}
	return ""
}

func (x *ProxyOrderUI) GetMerchantBankName() string {
	if x != nil {
		return x.MerchantBankName
	}
	return ""
}

func (x *ProxyOrderUI) GetMerchantAccountName() string {
	if x != nil {
		return x.MerchantAccountName
	}
	return ""
}

func (x *ProxyOrderUI) GetMerchantBankProvince() string {
	if x != nil {
		return x.MerchantBankProvince
	}
	return ""
}

func (x *ProxyOrderUI) GetMerchantBankCity() string {
	if x != nil {
		return x.MerchantBankCity
	}
	return ""
}

func (x *ProxyOrderUI) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

// 補單
type MakeUpReceiptOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo        string  `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	ChannelOrderNo string  `protobuf:"bytes,2,opt,name=ChannelOrderNo,proto3" json:"ChannelOrderNo,omitempty"`
	ReasonType     string  `protobuf:"bytes,3,opt,name=ReasonType,proto3" json:"ReasonType,omitempty"`
	Amount         float64 `protobuf:"fixed64,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Comment        string  `protobuf:"bytes,5,opt,name=Comment,proto3" json:"Comment,omitempty"`
	UserAccount    string  `protobuf:"bytes,6,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`
}

func (x *MakeUpReceiptOrderRequest) Reset() {
	*x = MakeUpReceiptOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeUpReceiptOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeUpReceiptOrderRequest) ProtoMessage() {}

func (x *MakeUpReceiptOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeUpReceiptOrderRequest.ProtoReflect.Descriptor instead.
func (*MakeUpReceiptOrderRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{33}
}

func (x *MakeUpReceiptOrderRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *MakeUpReceiptOrderRequest) GetChannelOrderNo() string {
	if x != nil {
		return x.ChannelOrderNo
	}
	return ""
}

func (x *MakeUpReceiptOrderRequest) GetReasonType() string {
	if x != nil {
		return x.ReasonType
	}
	return ""
}

func (x *MakeUpReceiptOrderRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MakeUpReceiptOrderRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *MakeUpReceiptOrderRequest) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

type MakeUpReceiptOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *MakeUpReceiptOrderResponse) Reset() {
	*x = MakeUpReceiptOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeUpReceiptOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeUpReceiptOrderResponse) ProtoMessage() {}

func (x *MakeUpReceiptOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeUpReceiptOrderResponse.ProtoReflect.Descriptor instead.
func (*MakeUpReceiptOrderResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{34}
}

func (x *MakeUpReceiptOrderResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MakeUpReceiptOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 手動確認收款
type ConfirmPayOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo string `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	Comment string `protobuf:"bytes,2,opt,name=Comment,proto3" json:"Comment,omitempty"`
}

func (x *ConfirmPayOrderRequest) Reset() {
	*x = ConfirmPayOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmPayOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmPayOrderRequest) ProtoMessage() {}

func (x *ConfirmPayOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmPayOrderRequest.ProtoReflect.Descriptor instead.
func (*ConfirmPayOrderRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{35}
}

func (x *ConfirmPayOrderRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ConfirmPayOrderRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type ConfirmPayOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                string  `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message             string  `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	MerchantCode        string  `protobuf:"bytes,3,opt,name=MerchantCode,proto3" json:"MerchantCode,omitempty"`
	MerchantOrderNo     string  `protobuf:"bytes,4,opt,name=MerchantOrderNo,proto3" json:"MerchantOrderNo,omitempty"`
	OrderNo             string  `protobuf:"bytes,5,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	OrderAmount         float64 `protobuf:"fixed64,6,opt,name=OrderAmount,proto3" json:"OrderAmount,omitempty"`
	ActualAmount        float64 `protobuf:"fixed64,7,opt,name=ActualAmount,proto3" json:"ActualAmount,omitempty"`
	TransferHandlingFee float64 `protobuf:"fixed64,8,opt,name=TransferHandlingFee,proto3" json:"TransferHandlingFee,omitempty"`
	NotifyUrl           string  `protobuf:"bytes,9,opt,name=NotifyUrl,proto3" json:"NotifyUrl,omitempty"`
	OrderTime           string  `protobuf:"bytes,10,opt,name=OrderTime,proto3" json:"OrderTime,omitempty"`
	PayOrderTime        string  `protobuf:"bytes,11,opt,name=PayOrderTime,proto3" json:"PayOrderTime,omitempty"`
	Status              string  `protobuf:"bytes,12,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ConfirmPayOrderResponse) Reset() {
	*x = ConfirmPayOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmPayOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmPayOrderResponse) ProtoMessage() {}

func (x *ConfirmPayOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmPayOrderResponse.ProtoReflect.Descriptor instead.
func (*ConfirmPayOrderResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{36}
}

func (x *ConfirmPayOrderResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ConfirmPayOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConfirmPayOrderResponse) GetMerchantCode() string {
	if x != nil {
		return x.MerchantCode
	}
	return ""
}

func (x *ConfirmPayOrderResponse) GetMerchantOrderNo() string {
	if x != nil {
		return x.MerchantOrderNo
	}
	return ""
}

func (x *ConfirmPayOrderResponse) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ConfirmPayOrderResponse) GetOrderAmount() float64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *ConfirmPayOrderResponse) GetActualAmount() float64 {
	if x != nil {
		return x.ActualAmount
	}
	return 0
}

func (x *ConfirmPayOrderResponse) GetTransferHandlingFee() float64 {
	if x != nil {
		return x.TransferHandlingFee
	}
	return 0
}

func (x *ConfirmPayOrderResponse) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *ConfirmPayOrderResponse) GetOrderTime() string {
	if x != nil {
		return x.OrderTime
	}
	return ""
}

func (x *ConfirmPayOrderResponse) GetPayOrderTime() string {
	if x != nil {
		return x.PayOrderTime
	}
	return ""
}

func (x *ConfirmPayOrderResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type RecoverReceiptOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo               string  `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	Amount                float64 `protobuf:"fixed64,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	IsCalculateCommission bool    `protobuf:"varint,3,opt,name=isCalculateCommission,proto3" json:"isCalculateCommission,omitempty"`
	Comment               string  `protobuf:"bytes,4,opt,name=Comment,proto3" json:"Comment,omitempty"`
	UserAccount           string  `protobuf:"bytes,6,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`
}

func (x *RecoverReceiptOrderRequest) Reset() {
	*x = RecoverReceiptOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverReceiptOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverReceiptOrderRequest) ProtoMessage() {}

func (x *RecoverReceiptOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverReceiptOrderRequest.ProtoReflect.Descriptor instead.
func (*RecoverReceiptOrderRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{37}
}

func (x *RecoverReceiptOrderRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *RecoverReceiptOrderRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RecoverReceiptOrderRequest) GetIsCalculateCommission() bool {
	if x != nil {
		return x.IsCalculateCommission
	}
	return false
}

func (x *RecoverReceiptOrderRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *RecoverReceiptOrderRequest) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

type RecoverReceiptOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *RecoverReceiptOrderResponse) Reset() {
	*x = RecoverReceiptOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverReceiptOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverReceiptOrderResponse) ProtoMessage() {}

func (x *RecoverReceiptOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverReceiptOrderResponse.ProtoReflect.Descriptor instead.
func (*RecoverReceiptOrderResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{38}
}

func (x *RecoverReceiptOrderResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RecoverReceiptOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FrozenReceiptOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo      string  `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	FrozenAmount float64 `protobuf:"fixed64,2,opt,name=FrozenAmount,proto3" json:"FrozenAmount,omitempty"`
	Comment      string  `protobuf:"bytes,3,opt,name=Comment,proto3" json:"Comment,omitempty"`
	UserAccount  string  `protobuf:"bytes,4,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`
}

func (x *FrozenReceiptOrderRequest) Reset() {
	*x = FrozenReceiptOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrozenReceiptOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrozenReceiptOrderRequest) ProtoMessage() {}

func (x *FrozenReceiptOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrozenReceiptOrderRequest.ProtoReflect.Descriptor instead.
func (*FrozenReceiptOrderRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{39}
}

func (x *FrozenReceiptOrderRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *FrozenReceiptOrderRequest) GetFrozenAmount() float64 {
	if x != nil {
		return x.FrozenAmount
	}
	return 0
}

func (x *FrozenReceiptOrderRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *FrozenReceiptOrderRequest) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

type FrozenReceiptOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *FrozenReceiptOrderResponse) Reset() {
	*x = FrozenReceiptOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrozenReceiptOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrozenReceiptOrderResponse) ProtoMessage() {}

func (x *FrozenReceiptOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrozenReceiptOrderResponse.ProtoReflect.Descriptor instead.
func (*FrozenReceiptOrderResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{40}
}

func (x *FrozenReceiptOrderResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FrozenReceiptOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UnFrozenReceiptOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo     string `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	UserAccount string `protobuf:"bytes,2,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`
}

func (x *UnFrozenReceiptOrderRequest) Reset() {
	*x = UnFrozenReceiptOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnFrozenReceiptOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnFrozenReceiptOrderRequest) ProtoMessage() {}

func (x *UnFrozenReceiptOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnFrozenReceiptOrderRequest.ProtoReflect.Descriptor instead.
func (*UnFrozenReceiptOrderRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{41}
}

func (x *UnFrozenReceiptOrderRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *UnFrozenReceiptOrderRequest) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

type UnFrozenReceiptOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *UnFrozenReceiptOrderResponse) Reset() {
	*x = UnFrozenReceiptOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnFrozenReceiptOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnFrozenReceiptOrderResponse) ProtoMessage() {}

func (x *UnFrozenReceiptOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnFrozenReceiptOrderResponse.ProtoReflect.Descriptor instead.
func (*UnFrozenReceiptOrderResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{42}
}

func (x *UnFrozenReceiptOrderResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UnFrozenReceiptOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PersonalRebundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo     string `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	UserAccount string `protobuf:"bytes,2,opt,name=UserAccount,proto3" json:"UserAccount,omitempty"`
	Memo        string `protobuf:"bytes,3,opt,name=Memo,proto3" json:"Memo,omitempty"`
	Action      string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PersonalRebundRequest) Reset() {
	*x = PersonalRebundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalRebundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalRebundRequest) ProtoMessage() {}

func (x *PersonalRebundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalRebundRequest.ProtoReflect.Descriptor instead.
func (*PersonalRebundRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{43}
}

func (x *PersonalRebundRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *PersonalRebundRequest) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *PersonalRebundRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *PersonalRebundRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type PersonalRebundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo string `protobuf:"bytes,1,opt,name=orderNo,proto3" json:"orderNo,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *PersonalRebundResponse) Reset() {
	*x = PersonalRebundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalRebundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalRebundResponse) ProtoMessage() {}

func (x *PersonalRebundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalRebundResponse.ProtoReflect.Descriptor instead.
func (*PersonalRebundResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{44}
}

func (x *PersonalRebundResponse) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *PersonalRebundResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PersonalRebundResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RecalculateProfitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CalculateProfit `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *RecalculateProfitRequest) Reset() {
	*x = RecalculateProfitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecalculateProfitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecalculateProfitRequest) ProtoMessage() {}

func (x *RecalculateProfitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecalculateProfitRequest.ProtoReflect.Descriptor instead.
func (*RecalculateProfitRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{45}
}

func (x *RecalculateProfitRequest) GetList() []*CalculateProfit {
	if x != nil {
		return x.List
	}
	return nil
}

type CalculateProfit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantCode        string  `protobuf:"bytes,1,opt,name=MerchantCode,proto3" json:"MerchantCode,omitempty"`
	OrderNo             string  `protobuf:"bytes,2,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	Type                string  `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	CurrencyCode        string  `protobuf:"bytes,4,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	BalanceType         string  `protobuf:"bytes,5,opt,name=BalanceType,proto3" json:"BalanceType,omitempty"`
	ChannelCode         string  `protobuf:"bytes,6,opt,name=ChannelCode,proto3" json:"ChannelCode,omitempty"`
	ChannelPayTypesCode string  `protobuf:"bytes,7,opt,name=ChannelPayTypesCode,proto3" json:"ChannelPayTypesCode,omitempty"`
	OrderAmount         float64 `protobuf:"fixed64,8,opt,name=OrderAmount,proto3" json:"OrderAmount,omitempty"`
}

func (x *CalculateProfit) Reset() {
	*x = CalculateProfit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateProfit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateProfit) ProtoMessage() {}

func (x *CalculateProfit) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateProfit.ProtoReflect.Descriptor instead.
func (*CalculateProfit) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{46}
}

func (x *CalculateProfit) GetMerchantCode() string {
	if x != nil {
		return x.MerchantCode
	}
	return ""
}

func (x *CalculateProfit) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *CalculateProfit) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CalculateProfit) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *CalculateProfit) GetBalanceType() string {
	if x != nil {
		return x.BalanceType
	}
	return ""
}

func (x *CalculateProfit) GetChannelCode() string {
	if x != nil {
		return x.ChannelCode
	}
	return ""
}

func (x *CalculateProfit) GetChannelPayTypesCode() string {
	if x != nil {
		return x.ChannelPayTypesCode
	}
	return ""
}

func (x *CalculateProfit) GetOrderAmount() float64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

type RecalculateProfitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *RecalculateProfitResponse) Reset() {
	*x = RecalculateProfitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecalculateProfitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecalculateProfitResponse) ProtoMessage() {}

func (x *RecalculateProfitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecalculateProfitResponse.ProtoReflect.Descriptor instead.
func (*RecalculateProfitResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{47}
}

func (x *RecalculateProfitResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RecalculateProfitResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CalculateCommissionMonthAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month string `protobuf:"bytes,1,opt,name=Month,proto3" json:"Month,omitempty"`
}

func (x *CalculateCommissionMonthAllRequest) Reset() {
	*x = CalculateCommissionMonthAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateCommissionMonthAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateCommissionMonthAllRequest) ProtoMessage() {}

func (x *CalculateCommissionMonthAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateCommissionMonthAllRequest.ProtoReflect.Descriptor instead.
func (*CalculateCommissionMonthAllRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{48}
}

func (x *CalculateCommissionMonthAllRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

type CalculateCommissionMonthAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *CalculateCommissionMonthAllResponse) Reset() {
	*x = CalculateCommissionMonthAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateCommissionMonthAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateCommissionMonthAllResponse) ProtoMessage() {}

func (x *CalculateCommissionMonthAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateCommissionMonthAllResponse.ProtoReflect.Descriptor instead.
func (*CalculateCommissionMonthAllResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{49}
}

func (x *CalculateCommissionMonthAllResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CalculateCommissionMonthAllResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RecalculateCommissionMonthReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *RecalculateCommissionMonthReportRequest) Reset() {
	*x = RecalculateCommissionMonthReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecalculateCommissionMonthReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecalculateCommissionMonthReportRequest) ProtoMessage() {}

func (x *RecalculateCommissionMonthReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecalculateCommissionMonthReportRequest.ProtoReflect.Descriptor instead.
func (*RecalculateCommissionMonthReportRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{50}
}

func (x *RecalculateCommissionMonthReportRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type RecalculateCommissionMonthReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *RecalculateCommissionMonthReportResponse) Reset() {
	*x = RecalculateCommissionMonthReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecalculateCommissionMonthReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecalculateCommissionMonthReportResponse) ProtoMessage() {}

func (x *RecalculateCommissionMonthReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecalculateCommissionMonthReportResponse.ProtoReflect.Descriptor instead.
func (*RecalculateCommissionMonthReportResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{51}
}

func (x *RecalculateCommissionMonthReportResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RecalculateCommissionMonthReportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ConfirmCommissionMonthReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ConfirmBy string `protobuf:"bytes,2,opt,name=ConfirmBy,proto3" json:"ConfirmBy,omitempty"`
}

func (x *ConfirmCommissionMonthReportRequest) Reset() {
	*x = ConfirmCommissionMonthReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmCommissionMonthReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmCommissionMonthReportRequest) ProtoMessage() {}

func (x *ConfirmCommissionMonthReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmCommissionMonthReportRequest.ProtoReflect.Descriptor instead.
func (*ConfirmCommissionMonthReportRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{52}
}

func (x *ConfirmCommissionMonthReportRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ConfirmCommissionMonthReportRequest) GetConfirmBy() string {
	if x != nil {
		return x.ConfirmBy
	}
	return ""
}

type ConfirmCommissionMonthReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ConfirmCommissionMonthReportResponse) Reset() {
	*x = ConfirmCommissionMonthReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmCommissionMonthReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmCommissionMonthReportResponse) ProtoMessage() {}

func (x *ConfirmCommissionMonthReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmCommissionMonthReportResponse.ProtoReflect.Descriptor instead.
func (*ConfirmCommissionMonthReportResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{53}
}

func (x *ConfirmCommissionMonthReportResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ConfirmCommissionMonthReportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CalculateMonthProfitReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month string `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *CalculateMonthProfitReportRequest) Reset() {
	*x = CalculateMonthProfitReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateMonthProfitReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateMonthProfitReportRequest) ProtoMessage() {}

func (x *CalculateMonthProfitReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateMonthProfitReportRequest.ProtoReflect.Descriptor instead.
func (*CalculateMonthProfitReportRequest) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{54}
}

func (x *CalculateMonthProfitReportRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

type CalculateMonthProfitReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *CalculateMonthProfitReportResponse) Reset() {
	*x = CalculateMonthProfitReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateMonthProfitReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateMonthProfitReportResponse) ProtoMessage() {}

func (x *CalculateMonthProfitReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateMonthProfitReportResponse.ProtoReflect.Descriptor instead.
func (*CalculateMonthProfitReportResponse) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{55}
}

func (x *CalculateMonthProfitReportResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CalculateMonthProfitReportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_transaction_proto protoreflect.FileDescriptor

var file_transaction_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xdc, 0x01, 0x0a, 0x1c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x4d, 0x0a, 0x1d, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa1,
	0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x4d, 0x65, 0x72, 0x43, 0x68, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x53, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x79, 0x46, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0x68, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x50, 0x61, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x66, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x19, 0x50, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x1a, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3b,
	0x0a, 0x15, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xce, 0x04, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50,
	0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x69,
	0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61,
	0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61,
	0x6e, 0x6b, 0x4e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b,
	0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x72, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x72, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x66, 0x72, 0x61, 0x79, 0x49, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x66, 0x72, 0x61, 0x79, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x72, 0x61, 0x79, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x66, 0x72, 0x61, 0x79, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x72, 0x61, 0x79, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x66, 0x72, 0x61,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62,
	0x4e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x75, 0x62, 0x4e, 0x6f, 0x22, 0xf8, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x43, 0x68, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x44,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x46, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46,
	0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x68, 0x46, 0x65, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x43, 0x68, 0x46, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x68, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x43, 0x68, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x69,
	0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x69, 0x55, 0x72,
	0x6c, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x08,
	0x70, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x4d,
	0x65, 0x72, 0x43, 0x68, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x22, 0x60, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x22, 0xc0, 0x04, 0x0a, 0x08, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x50, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x75, 0x6d, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4a, 0x75, 0x6d, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x22, 0xbe, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x64, 0x0a, 0x19, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x19, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x22, 0x5f, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfb, 0x04, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6d,
	0x67, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x43, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x69, 0x74, 0x79, 0x12, 0x32,
	0x0a, 0x14, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x4e,
	0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x22, 0xab, 0x05, 0x0a, 0x19, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x4d, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x72, 0x46, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x4d, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69,
	0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x61, 0x78, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x6e, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x68, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x6e, 0x49, 0x73, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x68, 0x6e, 0x49,
	0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x70, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x70, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x70, 0x74, 0x46, 0x65, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x43, 0x70, 0x74, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x43, 0x70, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x43, 0x70, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x46, 0x65, 0x65, 0x22, 0xa6, 0x05, 0x0a, 0x14, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e,
	0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4e,
	0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x50, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d,
	0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a,
	0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc4,
	0x01, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0x9b, 0x03, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c,
	0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50,
	0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x5a, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x67, 0x0a, 0x1d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6b, 0x0a, 0x19, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0x64, 0x0a, 0x1a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x1c,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x22, 0x67, 0x0a, 0x1d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5b, 0x0a, 0x0f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x49, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x49, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x49, 0x12, 0x64, 0x0a,
	0x19, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x19, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x22, 0x68, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x55, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcc, 0x03,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x49, 0x12, 0x22,
	0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x69, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x61, 0x6e, 0x6b, 0x43, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd1, 0x01, 0x0a,
	0x19, 0x4d, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x4a, 0x0a, 0x1a, 0x4d, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4c, 0x0a, 0x16,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9f, 0x03, 0x0a, 0x17, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc0, 0x01, 0x0a,
	0x1a, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x15, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x4b, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x95, 0x01, 0x0a,
	0x19, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x1a, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x59, 0x0a, 0x1b, 0x55, 0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x1c, 0x55,
	0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7f, 0x0a, 0x15, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65,
	0x6d, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x16, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4c, 0x0a, 0x18,
	0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x0f, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x19,
	0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x22, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x22, 0x53, 0x0a, 0x23, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x27, 0x52, 0x65, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x58, 0x0a, 0x28, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x53, 0x0a,
	0x23, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x42, 0x79, 0x22, 0x54, 0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x21, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x22, 0x52, 0x0a, 0x22, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xbc, 0x1a, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x1f, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x46, 0x42, 0x12, 0x1e, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x18, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x58, 0x46, 0x42, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x1d, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x5f, 0x44, 0x46, 0x42, 0x12, 0x20, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x50, 0x61, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x50, 0x61, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x64, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x5f, 0x58,
	0x46, 0x42, 0x12, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x12, 0x26, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f,
	0x0a, 0x14, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x65,
	0x73, 0x74, 0x5f, 0x44, 0x46, 0x42, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5f, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x54,
	0x65, 0x73, 0x74, 0x5f, 0x58, 0x46, 0x42, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x60, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x44, 0x46, 0x42, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x65, 0x73, 0x74, 0x54,
	0x6f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x58, 0x46, 0x42, 0x12, 0x22, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x18, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a,
	0x15, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x20, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x1d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x20, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55,
	0x49, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x46, 0x42,
	0x12, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x49, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x55, 0x49, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x58, 0x46, 0x42, 0x12, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x49, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55,
	0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x1d, 0x4d, 0x61, 0x6b,
	0x65, 0x55, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x1a, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50,
	0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x1e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x1d, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x1f, 0x55,
	0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x1d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x62, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x44, 0x46, 0x42, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x62, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x1d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x75, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x58, 0x46, 0x42, 0x12, 0x22,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x21, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8f, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x83, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x30, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x1a, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_proto_rawDescOnce sync.Once
	file_transaction_proto_rawDescData = file_transaction_proto_rawDesc
)

func file_transaction_proto_rawDescGZIP() []byte {
	file_transaction_proto_rawDescOnce.Do(func() {
		file_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_proto_rawDescData)
	})
	return file_transaction_proto_rawDescData
}

var file_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_transaction_proto_goTypes = []interface{}{
	(*MerchantBalanceUpdateRequest)(nil),             // 0: transaction.MerchantBalanceUpdateRequest
	(*MerchantBalanceUpdateResponse)(nil),            // 1: transaction.MerchantBalanceUpdateResponse
	(*ProxyOrderRequest)(nil),                        // 2: transaction.ProxyOrderRequest
	(*ProxyPayFailRequest)(nil),                      // 3: transaction.ProxyPayFailRequest
	(*ProxyPayFailResponse)(nil),                     // 4: transaction.ProxyPayFailResponse
	(*ProxyOrderResponse)(nil),                       // 5: transaction.ProxyOrderResponse
	(*PayOrderSwitchTestRequest)(nil),                // 6: transaction.PayOrderSwitchTestRequest
	(*PayOrderSwitchTestResponse)(nil),               // 7: transaction.PayOrderSwitchTestResponse
	(*ProxyOrderTestRequest)(nil),                    // 8: transaction.ProxyOrderTestRequest
	(*ProxyOrderTestResponse)(nil),                   // 9: transaction.ProxyOrderTestResponse
	(*ProxyPayOrderRequest)(nil),                     // 10: transaction.ProxyPayOrderRequest
	(*CorrespondMerChnRate)(nil),                     // 11: transaction.CorrespondMerChnRate
	(*PayOrderRequest)(nil),                          // 12: transaction.PayOrderRequest
	(*PayOrderResponse)(nil),                         // 13: transaction.PayOrderResponse
	(*PayOrder)(nil),                                 // 14: transaction.PayOrder
	(*InternalOrderRequest)(nil),                     // 15: transaction.InternalOrderRequest
	(*InternalOrderResponse)(nil),                    // 16: transaction.InternalOrderResponse
	(*InternalOrder)(nil),                            // 17: transaction.InternalOrder
	(*MerchantOrderRateListView)(nil),                // 18: transaction.MerchantOrderRateListView
	(*WithdrawOrderRequest)(nil),                     // 19: transaction.WithdrawOrderRequest
	(*WithdrawOrderResponse)(nil),                    // 20: transaction.WithdrawOrderResponse
	(*PayCallBackRequest)(nil),                       // 21: transaction.PayCallBackRequest
	(*PayCallBackResponse)(nil),                      // 22: transaction.PayCallBackResponse
	(*InternalReviewSuccessRequest)(nil),             // 23: transaction.InternalReviewSuccessRequest
	(*InternalReviewSuccessResponse)(nil),            // 24: transaction.InternalReviewSuccessResponse
	(*WithdrawReviewFailRequest)(nil),                // 25: transaction.WithdrawReviewFailRequest
	(*WithdrawReviewFailResponse)(nil),               // 26: transaction.WithdrawReviewFailResponse
	(*WithdrawReviewSuccessRequest)(nil),             // 27: transaction.WithdrawReviewSuccessRequest
	(*WithdrawReviewSuccessResponse)(nil),            // 28: transaction.WithdrawReviewSuccessResponse
	(*ChannelWithdraw)(nil),                          // 29: transaction.ChannelWithdraw
	(*ProxyOrderUIRequest)(nil),                      // 30: transaction.ProxyOrderUIRequest
	(*ProxyOrderUIResponse)(nil),                     // 31: transaction.ProxyOrderUIResponse
	(*ProxyOrderUI)(nil),                             // 32: transaction.ProxyOrderUI
	(*MakeUpReceiptOrderRequest)(nil),                // 33: transaction.MakeUpReceiptOrderRequest
	(*MakeUpReceiptOrderResponse)(nil),               // 34: transaction.MakeUpReceiptOrderResponse
	(*ConfirmPayOrderRequest)(nil),                   // 35: transaction.ConfirmPayOrderRequest
	(*ConfirmPayOrderResponse)(nil),                  // 36: transaction.ConfirmPayOrderResponse
	(*RecoverReceiptOrderRequest)(nil),               // 37: transaction.RecoverReceiptOrderRequest
	(*RecoverReceiptOrderResponse)(nil),              // 38: transaction.RecoverReceiptOrderResponse
	(*FrozenReceiptOrderRequest)(nil),                // 39: transaction.FrozenReceiptOrderRequest
	(*FrozenReceiptOrderResponse)(nil),               // 40: transaction.FrozenReceiptOrderResponse
	(*UnFrozenReceiptOrderRequest)(nil),              // 41: transaction.UnFrozenReceiptOrderRequest
	(*UnFrozenReceiptOrderResponse)(nil),             // 42: transaction.UnFrozenReceiptOrderResponse
	(*PersonalRebundRequest)(nil),                    // 43: transaction.PersonalRebundRequest
	(*PersonalRebundResponse)(nil),                   // 44: transaction.PersonalRebundResponse
	(*RecalculateProfitRequest)(nil),                 // 45: transaction.RecalculateProfitRequest
	(*CalculateProfit)(nil),                          // 46: transaction.CalculateProfit
	(*RecalculateProfitResponse)(nil),                // 47: transaction.RecalculateProfitResponse
	(*CalculateCommissionMonthAllRequest)(nil),       // 48: transaction.CalculateCommissionMonthAllRequest
	(*CalculateCommissionMonthAllResponse)(nil),      // 49: transaction.CalculateCommissionMonthAllResponse
	(*RecalculateCommissionMonthReportRequest)(nil),  // 50: transaction.RecalculateCommissionMonthReportRequest
	(*RecalculateCommissionMonthReportResponse)(nil), // 51: transaction.RecalculateCommissionMonthReportResponse
	(*ConfirmCommissionMonthReportRequest)(nil),      // 52: transaction.ConfirmCommissionMonthReportRequest
	(*ConfirmCommissionMonthReportResponse)(nil),     // 53: transaction.ConfirmCommissionMonthReportResponse
	(*CalculateMonthProfitReportRequest)(nil),        // 54: transaction.CalculateMonthProfitReportRequest
	(*CalculateMonthProfitReportResponse)(nil),       // 55: transaction.CalculateMonthProfitReportResponse
}
var file_transaction_proto_depIdxs = []int32{
	10, // 0: transaction.ProxyOrderRequest.req:type_name -> transaction.ProxyPayOrderRequest
	11, // 1: transaction.ProxyOrderRequest.rate:type_name -> transaction.CorrespondMerChnRate
	14, // 2: transaction.PayOrderRequest.payOrder:type_name -> transaction.PayOrder
	11, // 3: transaction.PayOrderRequest.Rate:type_name -> transaction.CorrespondMerChnRate
	17, // 4: transaction.InternalOrderRequest.internalOrder:type_name -> transaction.InternalOrder
	18, // 5: transaction.InternalOrderRequest.merchantOrderRateListView:type_name -> transaction.MerchantOrderRateListView
	29, // 6: transaction.WithdrawReviewSuccessRequest.channelWithdraw:type_name -> transaction.ChannelWithdraw
	32, // 7: transaction.ProxyOrderUIRequest.proxyOrderUI:type_name -> transaction.ProxyOrderUI
	18, // 8: transaction.ProxyOrderUIRequest.merchantOrderRateListView:type_name -> transaction.MerchantOrderRateListView
	46, // 9: transaction.RecalculateProfitRequest.list:type_name -> transaction.CalculateProfit
	0,  // 10: transaction.Transaction.MerchantBalanceUpdateTranaction:input_type -> transaction.MerchantBalanceUpdateRequest
	2,  // 11: transaction.Transaction.ProxyOrderTranaction_DFB:input_type -> transaction.ProxyOrderRequest
	2,  // 12: transaction.Transaction.ProxyOrderTranaction_XFB:input_type -> transaction.ProxyOrderRequest
	3,  // 13: transaction.Transaction.ProxyOrderTransactionFail_DFB:input_type -> transaction.ProxyPayFailRequest
	3,  // 14: transaction.Transaction.ProxyOrderTransactionFail_XFB:input_type -> transaction.ProxyPayFailRequest
	6,  // 15: transaction.Transaction.PayOrderSwitchTest:input_type -> transaction.PayOrderSwitchTestRequest
	8,  // 16: transaction.Transaction.ProxyOrderToTest_DFB:input_type -> transaction.ProxyOrderTestRequest
	8,  // 17: transaction.Transaction.ProxyOrderToTest_XFB:input_type -> transaction.ProxyOrderTestRequest
	8,  // 18: transaction.Transaction.ProxyTestToNormal_DFB:input_type -> transaction.ProxyOrderTestRequest
	8,  // 19: transaction.Transaction.ProxyTestToNormal_XFB:input_type -> transaction.ProxyOrderTestRequest
	12, // 20: transaction.Transaction.PayOrderTranaction:input_type -> transaction.PayOrderRequest
	15, // 21: transaction.Transaction.InternalOrderTransaction:input_type -> transaction.InternalOrderRequest
	19, // 22: transaction.Transaction.WithdrawOrderTransaction:input_type -> transaction.WithdrawOrderRequest
	21, // 23: transaction.Transaction.PayCallBackTranaction:input_type -> transaction.PayCallBackRequest
	23, // 24: transaction.Transaction.InternalReviewSuccessTransaction:input_type -> transaction.InternalReviewSuccessRequest
	25, // 25: transaction.Transaction.WithdrawReviewFailTransaction:input_type -> transaction.WithdrawReviewFailRequest
	27, // 26: transaction.Transaction.WithdrawReviewSuccessTransaction:input_type -> transaction.WithdrawReviewSuccessRequest
	30, // 27: transaction.Transaction.ProxyOrderUITransaction_DFB:input_type -> transaction.ProxyOrderUIRequest
	30, // 28: transaction.Transaction.ProxyOrderUITransaction_XFB:input_type -> transaction.ProxyOrderUIRequest
	33, // 29: transaction.Transaction.MakeUpReceiptOrderTransaction:input_type -> transaction.MakeUpReceiptOrderRequest
	35, // 30: transaction.Transaction.ConfirmPayOrderTransaction:input_type -> transaction.ConfirmPayOrderRequest
	37, // 31: transaction.Transaction.RecoverReceiptOrderTransaction:input_type -> transaction.RecoverReceiptOrderRequest
	39, // 32: transaction.Transaction.FrozenReceiptOrderTransaction:input_type -> transaction.FrozenReceiptOrderRequest
	41, // 33: transaction.Transaction.UnFrozenReceiptOrderTransaction:input_type -> transaction.UnFrozenReceiptOrderRequest
	43, // 34: transaction.Transaction.PersonalRebundTransaction_DFB:input_type -> transaction.PersonalRebundRequest
	43, // 35: transaction.Transaction.PersonalRebundTransaction_XFB:input_type -> transaction.PersonalRebundRequest
	45, // 36: transaction.Transaction.RecalculateProfitTransaction:input_type -> transaction.RecalculateProfitRequest
	48, // 37: transaction.Transaction.CalculateCommissionMonthAllReport:input_type -> transaction.CalculateCommissionMonthAllRequest
	50, // 38: transaction.Transaction.RecalculateCommissionMonthReport:input_type -> transaction.RecalculateCommissionMonthReportRequest
	52, // 39: transaction.Transaction.ConfirmCommissionMonthReport:input_type -> transaction.ConfirmCommissionMonthReportRequest
	54, // 40: transaction.Transaction.CalculateMonthProfitReport:input_type -> transaction.CalculateMonthProfitReportRequest
	1,  // 41: transaction.Transaction.MerchantBalanceUpdateTranaction:output_type -> transaction.MerchantBalanceUpdateResponse
	5,  // 42: transaction.Transaction.ProxyOrderTranaction_DFB:output_type -> transaction.ProxyOrderResponse
	5,  // 43: transaction.Transaction.ProxyOrderTranaction_XFB:output_type -> transaction.ProxyOrderResponse
	4,  // 44: transaction.Transaction.ProxyOrderTransactionFail_DFB:output_type -> transaction.ProxyPayFailResponse
	4,  // 45: transaction.Transaction.ProxyOrderTransactionFail_XFB:output_type -> transaction.ProxyPayFailResponse
	7,  // 46: transaction.Transaction.PayOrderSwitchTest:output_type -> transaction.PayOrderSwitchTestResponse
	9,  // 47: transaction.Transaction.ProxyOrderToTest_DFB:output_type -> transaction.ProxyOrderTestResponse
	9,  // 48: transaction.Transaction.ProxyOrderToTest_XFB:output_type -> transaction.ProxyOrderTestResponse
	9,  // 49: transaction.Transaction.ProxyTestToNormal_DFB:output_type -> transaction.ProxyOrderTestResponse
	9,  // 50: transaction.Transaction.ProxyTestToNormal_XFB:output_type -> transaction.ProxyOrderTestResponse
	13, // 51: transaction.Transaction.PayOrderTranaction:output_type -> transaction.PayOrderResponse
	16, // 52: transaction.Transaction.InternalOrderTransaction:output_type -> transaction.InternalOrderResponse
	20, // 53: transaction.Transaction.WithdrawOrderTransaction:output_type -> transaction.WithdrawOrderResponse
	22, // 54: transaction.Transaction.PayCallBackTranaction:output_type -> transaction.PayCallBackResponse
	24, // 55: transaction.Transaction.InternalReviewSuccessTransaction:output_type -> transaction.InternalReviewSuccessResponse
	26, // 56: transaction.Transaction.WithdrawReviewFailTransaction:output_type -> transaction.WithdrawReviewFailResponse
	28, // 57: transaction.Transaction.WithdrawReviewSuccessTransaction:output_type -> transaction.WithdrawReviewSuccessResponse
	31, // 58: transaction.Transaction.ProxyOrderUITransaction_DFB:output_type -> transaction.ProxyOrderUIResponse
	31, // 59: transaction.Transaction.ProxyOrderUITransaction_XFB:output_type -> transaction.ProxyOrderUIResponse
	34, // 60: transaction.Transaction.MakeUpReceiptOrderTransaction:output_type -> transaction.MakeUpReceiptOrderResponse
	36, // 61: transaction.Transaction.ConfirmPayOrderTransaction:output_type -> transaction.ConfirmPayOrderResponse
	38, // 62: transaction.Transaction.RecoverReceiptOrderTransaction:output_type -> transaction.RecoverReceiptOrderResponse
	40, // 63: transaction.Transaction.FrozenReceiptOrderTransaction:output_type -> transaction.FrozenReceiptOrderResponse
	42, // 64: transaction.Transaction.UnFrozenReceiptOrderTransaction:output_type -> transaction.UnFrozenReceiptOrderResponse
	44, // 65: transaction.Transaction.PersonalRebundTransaction_DFB:output_type -> transaction.PersonalRebundResponse
	44, // 66: transaction.Transaction.PersonalRebundTransaction_XFB:output_type -> transaction.PersonalRebundResponse
	47, // 67: transaction.Transaction.RecalculateProfitTransaction:output_type -> transaction.RecalculateProfitResponse
	49, // 68: transaction.Transaction.CalculateCommissionMonthAllReport:output_type -> transaction.CalculateCommissionMonthAllResponse
	51, // 69: transaction.Transaction.RecalculateCommissionMonthReport:output_type -> transaction.RecalculateCommissionMonthReportResponse
	53, // 70: transaction.Transaction.ConfirmCommissionMonthReport:output_type -> transaction.ConfirmCommissionMonthReportResponse
	55, // 71: transaction.Transaction.CalculateMonthProfitReport:output_type -> transaction.CalculateMonthProfitReportResponse
	41, // [41:72] is the sub-list for method output_type
	10, // [10:41] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_transaction_proto_init() }
func file_transaction_proto_init() {
	if File_transaction_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantBalanceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantBalanceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyPayFailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyPayFailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayOrderSwitchTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayOrderSwitchTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyOrderTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyOrderTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyPayOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrespondMerChnRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantOrderRateListView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayCallBackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayCallBackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalReviewSuccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalReviewSuccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawReviewFailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawReviewFailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawReviewSuccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawReviewSuccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyOrderUIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyOrderUIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyOrderUI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeUpReceiptOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeUpReceiptOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmPayOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmPayOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverReceiptOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverReceiptOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrozenReceiptOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrozenReceiptOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnFrozenReceiptOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnFrozenReceiptOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalRebundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalRebundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecalculateProfitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateProfit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecalculateProfitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateCommissionMonthAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateCommissionMonthAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecalculateCommissionMonthReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecalculateCommissionMonthReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmCommissionMonthReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmCommissionMonthReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateMonthProfitReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateMonthProfitReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transaction_proto_goTypes,
		DependencyIndexes: file_transaction_proto_depIdxs,
		MessageInfos:      file_transaction_proto_msgTypes,
	}.Build()
	File_transaction_proto = out.File
	file_transaction_proto_rawDesc = nil
	file_transaction_proto_goTypes = nil
	file_transaction_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TransactionClient is the client API for Transaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionClient interface {
	MerchantBalanceUpdateTranaction(ctx context.Context, in *MerchantBalanceUpdateRequest, opts ...grpc.CallOption) (*MerchantBalanceUpdateResponse, error)
	ProxyOrderTranaction_DFB(ctx context.Context, in *ProxyOrderRequest, opts ...grpc.CallOption) (*ProxyOrderResponse, error)
	ProxyOrderTranaction_XFB(ctx context.Context, in *ProxyOrderRequest, opts ...grpc.CallOption) (*ProxyOrderResponse, error)
	ProxyOrderTransactionFail_DFB(ctx context.Context, in *ProxyPayFailRequest, opts ...grpc.CallOption) (*ProxyPayFailResponse, error)
	ProxyOrderTransactionFail_XFB(ctx context.Context, in *ProxyPayFailRequest, opts ...grpc.CallOption) (*ProxyPayFailResponse, error)
	PayOrderSwitchTest(ctx context.Context, in *PayOrderSwitchTestRequest, opts ...grpc.CallOption) (*PayOrderSwitchTestResponse, error)
	ProxyOrderToTest_DFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error)
	ProxyOrderToTest_XFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error)
	ProxyTestToNormal_DFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error)
	ProxyTestToNormal_XFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error)
	PayOrderTranaction(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderResponse, error)
	InternalOrderTransaction(ctx context.Context, in *InternalOrderRequest, opts ...grpc.CallOption) (*InternalOrderResponse, error)
	WithdrawOrderTransaction(ctx context.Context, in *WithdrawOrderRequest, opts ...grpc.CallOption) (*WithdrawOrderResponse, error)
	PayCallBackTranaction(ctx context.Context, in *PayCallBackRequest, opts ...grpc.CallOption) (*PayCallBackResponse, error)
	InternalReviewSuccessTransaction(ctx context.Context, in *InternalReviewSuccessRequest, opts ...grpc.CallOption) (*InternalReviewSuccessResponse, error)
	WithdrawReviewFailTransaction(ctx context.Context, in *WithdrawReviewFailRequest, opts ...grpc.CallOption) (*WithdrawReviewFailResponse, error)
	WithdrawReviewSuccessTransaction(ctx context.Context, in *WithdrawReviewSuccessRequest, opts ...grpc.CallOption) (*WithdrawReviewSuccessResponse, error)
	ProxyOrderUITransaction_DFB(ctx context.Context, in *ProxyOrderUIRequest, opts ...grpc.CallOption) (*ProxyOrderUIResponse, error)
	ProxyOrderUITransaction_XFB(ctx context.Context, in *ProxyOrderUIRequest, opts ...grpc.CallOption) (*ProxyOrderUIResponse, error)
	MakeUpReceiptOrderTransaction(ctx context.Context, in *MakeUpReceiptOrderRequest, opts ...grpc.CallOption) (*MakeUpReceiptOrderResponse, error)
	ConfirmPayOrderTransaction(ctx context.Context, in *ConfirmPayOrderRequest, opts ...grpc.CallOption) (*ConfirmPayOrderResponse, error)
	RecoverReceiptOrderTransaction(ctx context.Context, in *RecoverReceiptOrderRequest, opts ...grpc.CallOption) (*RecoverReceiptOrderResponse, error)
	FrozenReceiptOrderTransaction(ctx context.Context, in *FrozenReceiptOrderRequest, opts ...grpc.CallOption) (*FrozenReceiptOrderResponse, error)
	UnFrozenReceiptOrderTransaction(ctx context.Context, in *UnFrozenReceiptOrderRequest, opts ...grpc.CallOption) (*UnFrozenReceiptOrderResponse, error)
	PersonalRebundTransaction_DFB(ctx context.Context, in *PersonalRebundRequest, opts ...grpc.CallOption) (*PersonalRebundResponse, error)
	PersonalRebundTransaction_XFB(ctx context.Context, in *PersonalRebundRequest, opts ...grpc.CallOption) (*PersonalRebundResponse, error)
	RecalculateProfitTransaction(ctx context.Context, in *RecalculateProfitRequest, opts ...grpc.CallOption) (*RecalculateProfitResponse, error)
	CalculateCommissionMonthAllReport(ctx context.Context, in *CalculateCommissionMonthAllRequest, opts ...grpc.CallOption) (*CalculateCommissionMonthAllResponse, error)
	RecalculateCommissionMonthReport(ctx context.Context, in *RecalculateCommissionMonthReportRequest, opts ...grpc.CallOption) (*RecalculateCommissionMonthReportResponse, error)
	ConfirmCommissionMonthReport(ctx context.Context, in *ConfirmCommissionMonthReportRequest, opts ...grpc.CallOption) (*ConfirmCommissionMonthReportResponse, error)
	CalculateMonthProfitReport(ctx context.Context, in *CalculateMonthProfitReportRequest, opts ...grpc.CallOption) (*CalculateMonthProfitReportResponse, error)
}

type transactionClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionClient(cc grpc.ClientConnInterface) TransactionClient {
	return &transactionClient{cc}
}

func (c *transactionClient) MerchantBalanceUpdateTranaction(ctx context.Context, in *MerchantBalanceUpdateRequest, opts ...grpc.CallOption) (*MerchantBalanceUpdateResponse, error) {
	out := new(MerchantBalanceUpdateResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/MerchantBalanceUpdateTranaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderTranaction_DFB(ctx context.Context, in *ProxyOrderRequest, opts ...grpc.CallOption) (*ProxyOrderResponse, error) {
	out := new(ProxyOrderResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/ProxyOrderTranaction_DFB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderTranaction_XFB(ctx context.Context, in *ProxyOrderRequest, opts ...grpc.CallOption) (*ProxyOrderResponse, error) {
	out := new(ProxyOrderResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/ProxyOrderTranaction_XFB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderTransactionFail_DFB(ctx context.Context, in *ProxyPayFailRequest, opts ...grpc.CallOption) (*ProxyPayFailResponse, error) {
	out := new(ProxyPayFailResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/ProxyOrderTransactionFail_DFB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderTransactionFail_XFB(ctx context.Context, in *ProxyPayFailRequest, opts ...grpc.CallOption) (*ProxyPayFailResponse, error) {
	out := new(ProxyPayFailResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/ProxyOrderTransactionFail_XFB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PayOrderSwitchTest(ctx context.Context, in *PayOrderSwitchTestRequest, opts ...grpc.CallOption) (*PayOrderSwitchTestResponse, error) {
	out := new(PayOrderSwitchTestResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/PayOrderSwitchTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderToTest_DFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error) {
	out := new(ProxyOrderTestResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/ProxyOrderToTest_DFB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderToTest_XFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error) {
	out := new(ProxyOrderTestResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/ProxyOrderToTest_XFB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyTestToNormal_DFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error) {
	out := new(ProxyOrderTestResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/ProxyTestToNormal_DFB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyTestToNormal_XFB(ctx context.Context, in *ProxyOrderTestRequest, opts ...grpc.CallOption) (*ProxyOrderTestResponse, error) {
	out := new(ProxyOrderTestResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/ProxyTestToNormal_XFB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PayOrderTranaction(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderResponse, error) {
	out := new(PayOrderResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/PayOrderTranaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) InternalOrderTransaction(ctx context.Context, in *InternalOrderRequest, opts ...grpc.CallOption) (*InternalOrderResponse, error) {
	out := new(InternalOrderResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/InternalOrderTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) WithdrawOrderTransaction(ctx context.Context, in *WithdrawOrderRequest, opts ...grpc.CallOption) (*WithdrawOrderResponse, error) {
	out := new(WithdrawOrderResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/WithdrawOrderTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PayCallBackTranaction(ctx context.Context, in *PayCallBackRequest, opts ...grpc.CallOption) (*PayCallBackResponse, error) {
	out := new(PayCallBackResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/PayCallBackTranaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) InternalReviewSuccessTransaction(ctx context.Context, in *InternalReviewSuccessRequest, opts ...grpc.CallOption) (*InternalReviewSuccessResponse, error) {
	out := new(InternalReviewSuccessResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/InternalReviewSuccessTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) WithdrawReviewFailTransaction(ctx context.Context, in *WithdrawReviewFailRequest, opts ...grpc.CallOption) (*WithdrawReviewFailResponse, error) {
	out := new(WithdrawReviewFailResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/WithdrawReviewFailTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) WithdrawReviewSuccessTransaction(ctx context.Context, in *WithdrawReviewSuccessRequest, opts ...grpc.CallOption) (*WithdrawReviewSuccessResponse, error) {
	out := new(WithdrawReviewSuccessResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/WithdrawReviewSuccessTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderUITransaction_DFB(ctx context.Context, in *ProxyOrderUIRequest, opts ...grpc.CallOption) (*ProxyOrderUIResponse, error) {
	out := new(ProxyOrderUIResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/ProxyOrderUITransaction_DFB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ProxyOrderUITransaction_XFB(ctx context.Context, in *ProxyOrderUIRequest, opts ...grpc.CallOption) (*ProxyOrderUIResponse, error) {
	out := new(ProxyOrderUIResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/ProxyOrderUITransaction_XFB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) MakeUpReceiptOrderTransaction(ctx context.Context, in *MakeUpReceiptOrderRequest, opts ...grpc.CallOption) (*MakeUpReceiptOrderResponse, error) {
	out := new(MakeUpReceiptOrderResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/MakeUpReceiptOrderTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ConfirmPayOrderTransaction(ctx context.Context, in *ConfirmPayOrderRequest, opts ...grpc.CallOption) (*ConfirmPayOrderResponse, error) {
	out := new(ConfirmPayOrderResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/ConfirmPayOrderTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) RecoverReceiptOrderTransaction(ctx context.Context, in *RecoverReceiptOrderRequest, opts ...grpc.CallOption) (*RecoverReceiptOrderResponse, error) {
	out := new(RecoverReceiptOrderResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/RecoverReceiptOrderTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) FrozenReceiptOrderTransaction(ctx context.Context, in *FrozenReceiptOrderRequest, opts ...grpc.CallOption) (*FrozenReceiptOrderResponse, error) {
	out := new(FrozenReceiptOrderResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/FrozenReceiptOrderTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) UnFrozenReceiptOrderTransaction(ctx context.Context, in *UnFrozenReceiptOrderRequest, opts ...grpc.CallOption) (*UnFrozenReceiptOrderResponse, error) {
	out := new(UnFrozenReceiptOrderResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/UnFrozenReceiptOrderTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PersonalRebundTransaction_DFB(ctx context.Context, in *PersonalRebundRequest, opts ...grpc.CallOption) (*PersonalRebundResponse, error) {
	out := new(PersonalRebundResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/PersonalRebundTransaction_DFB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PersonalRebundTransaction_XFB(ctx context.Context, in *PersonalRebundRequest, opts ...grpc.CallOption) (*PersonalRebundResponse, error) {
	out := new(PersonalRebundResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/PersonalRebundTransaction_XFB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) RecalculateProfitTransaction(ctx context.Context, in *RecalculateProfitRequest, opts ...grpc.CallOption) (*RecalculateProfitResponse, error) {
	out := new(RecalculateProfitResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/RecalculateProfitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) CalculateCommissionMonthAllReport(ctx context.Context, in *CalculateCommissionMonthAllRequest, opts ...grpc.CallOption) (*CalculateCommissionMonthAllResponse, error) {
	out := new(CalculateCommissionMonthAllResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/CalculateCommissionMonthAllReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) RecalculateCommissionMonthReport(ctx context.Context, in *RecalculateCommissionMonthReportRequest, opts ...grpc.CallOption) (*RecalculateCommissionMonthReportResponse, error) {
	out := new(RecalculateCommissionMonthReportResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/RecalculateCommissionMonthReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ConfirmCommissionMonthReport(ctx context.Context, in *ConfirmCommissionMonthReportRequest, opts ...grpc.CallOption) (*ConfirmCommissionMonthReportResponse, error) {
	out := new(ConfirmCommissionMonthReportResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/ConfirmCommissionMonthReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) CalculateMonthProfitReport(ctx context.Context, in *CalculateMonthProfitReportRequest, opts ...grpc.CallOption) (*CalculateMonthProfitReportResponse, error) {
	out := new(CalculateMonthProfitReportResponse)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/CalculateMonthProfitReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServer is the server API for Transaction service.
type TransactionServer interface {
	MerchantBalanceUpdateTranaction(context.Context, *MerchantBalanceUpdateRequest) (*MerchantBalanceUpdateResponse, error)
	ProxyOrderTranaction_DFB(context.Context, *ProxyOrderRequest) (*ProxyOrderResponse, error)
	ProxyOrderTranaction_XFB(context.Context, *ProxyOrderRequest) (*ProxyOrderResponse, error)
	ProxyOrderTransactionFail_DFB(context.Context, *ProxyPayFailRequest) (*ProxyPayFailResponse, error)
	ProxyOrderTransactionFail_XFB(context.Context, *ProxyPayFailRequest) (*ProxyPayFailResponse, error)
	PayOrderSwitchTest(context.Context, *PayOrderSwitchTestRequest) (*PayOrderSwitchTestResponse, error)
	ProxyOrderToTest_DFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error)
	ProxyOrderToTest_XFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error)
	ProxyTestToNormal_DFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error)
	ProxyTestToNormal_XFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error)
	PayOrderTranaction(context.Context, *PayOrderRequest) (*PayOrderResponse, error)
	InternalOrderTransaction(context.Context, *InternalOrderRequest) (*InternalOrderResponse, error)
	WithdrawOrderTransaction(context.Context, *WithdrawOrderRequest) (*WithdrawOrderResponse, error)
	PayCallBackTranaction(context.Context, *PayCallBackRequest) (*PayCallBackResponse, error)
	InternalReviewSuccessTransaction(context.Context, *InternalReviewSuccessRequest) (*InternalReviewSuccessResponse, error)
	WithdrawReviewFailTransaction(context.Context, *WithdrawReviewFailRequest) (*WithdrawReviewFailResponse, error)
	WithdrawReviewSuccessTransaction(context.Context, *WithdrawReviewSuccessRequest) (*WithdrawReviewSuccessResponse, error)
	ProxyOrderUITransaction_DFB(context.Context, *ProxyOrderUIRequest) (*ProxyOrderUIResponse, error)
	ProxyOrderUITransaction_XFB(context.Context, *ProxyOrderUIRequest) (*ProxyOrderUIResponse, error)
	MakeUpReceiptOrderTransaction(context.Context, *MakeUpReceiptOrderRequest) (*MakeUpReceiptOrderResponse, error)
	ConfirmPayOrderTransaction(context.Context, *ConfirmPayOrderRequest) (*ConfirmPayOrderResponse, error)
	RecoverReceiptOrderTransaction(context.Context, *RecoverReceiptOrderRequest) (*RecoverReceiptOrderResponse, error)
	FrozenReceiptOrderTransaction(context.Context, *FrozenReceiptOrderRequest) (*FrozenReceiptOrderResponse, error)
	UnFrozenReceiptOrderTransaction(context.Context, *UnFrozenReceiptOrderRequest) (*UnFrozenReceiptOrderResponse, error)
	PersonalRebundTransaction_DFB(context.Context, *PersonalRebundRequest) (*PersonalRebundResponse, error)
	PersonalRebundTransaction_XFB(context.Context, *PersonalRebundRequest) (*PersonalRebundResponse, error)
	RecalculateProfitTransaction(context.Context, *RecalculateProfitRequest) (*RecalculateProfitResponse, error)
	CalculateCommissionMonthAllReport(context.Context, *CalculateCommissionMonthAllRequest) (*CalculateCommissionMonthAllResponse, error)
	RecalculateCommissionMonthReport(context.Context, *RecalculateCommissionMonthReportRequest) (*RecalculateCommissionMonthReportResponse, error)
	ConfirmCommissionMonthReport(context.Context, *ConfirmCommissionMonthReportRequest) (*ConfirmCommissionMonthReportResponse, error)
	CalculateMonthProfitReport(context.Context, *CalculateMonthProfitReportRequest) (*CalculateMonthProfitReportResponse, error)
}

// UnimplementedTransactionServer can be embedded to have forward compatible implementations.
type UnimplementedTransactionServer struct {
}

func (*UnimplementedTransactionServer) MerchantBalanceUpdateTranaction(context.Context, *MerchantBalanceUpdateRequest) (*MerchantBalanceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantBalanceUpdateTranaction not implemented")
}
func (*UnimplementedTransactionServer) ProxyOrderTranaction_DFB(context.Context, *ProxyOrderRequest) (*ProxyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderTranaction_DFB not implemented")
}
func (*UnimplementedTransactionServer) ProxyOrderTranaction_XFB(context.Context, *ProxyOrderRequest) (*ProxyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderTranaction_XFB not implemented")
}
func (*UnimplementedTransactionServer) ProxyOrderTransactionFail_DFB(context.Context, *ProxyPayFailRequest) (*ProxyPayFailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderTransactionFail_DFB not implemented")
}
func (*UnimplementedTransactionServer) ProxyOrderTransactionFail_XFB(context.Context, *ProxyPayFailRequest) (*ProxyPayFailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderTransactionFail_XFB not implemented")
}
func (*UnimplementedTransactionServer) PayOrderSwitchTest(context.Context, *PayOrderSwitchTestRequest) (*PayOrderSwitchTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOrderSwitchTest not implemented")
}
func (*UnimplementedTransactionServer) ProxyOrderToTest_DFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderToTest_DFB not implemented")
}
func (*UnimplementedTransactionServer) ProxyOrderToTest_XFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderToTest_XFB not implemented")
}
func (*UnimplementedTransactionServer) ProxyTestToNormal_DFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyTestToNormal_DFB not implemented")
}
func (*UnimplementedTransactionServer) ProxyTestToNormal_XFB(context.Context, *ProxyOrderTestRequest) (*ProxyOrderTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyTestToNormal_XFB not implemented")
}
func (*UnimplementedTransactionServer) PayOrderTranaction(context.Context, *PayOrderRequest) (*PayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOrderTranaction not implemented")
}
func (*UnimplementedTransactionServer) InternalOrderTransaction(context.Context, *InternalOrderRequest) (*InternalOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalOrderTransaction not implemented")
}
func (*UnimplementedTransactionServer) WithdrawOrderTransaction(context.Context, *WithdrawOrderRequest) (*WithdrawOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawOrderTransaction not implemented")
}
func (*UnimplementedTransactionServer) PayCallBackTranaction(context.Context, *PayCallBackRequest) (*PayCallBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayCallBackTranaction not implemented")
}
func (*UnimplementedTransactionServer) InternalReviewSuccessTransaction(context.Context, *InternalReviewSuccessRequest) (*InternalReviewSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalReviewSuccessTransaction not implemented")
}
func (*UnimplementedTransactionServer) WithdrawReviewFailTransaction(context.Context, *WithdrawReviewFailRequest) (*WithdrawReviewFailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawReviewFailTransaction not implemented")
}
func (*UnimplementedTransactionServer) WithdrawReviewSuccessTransaction(context.Context, *WithdrawReviewSuccessRequest) (*WithdrawReviewSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawReviewSuccessTransaction not implemented")
}
func (*UnimplementedTransactionServer) ProxyOrderUITransaction_DFB(context.Context, *ProxyOrderUIRequest) (*ProxyOrderUIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderUITransaction_DFB not implemented")
}
func (*UnimplementedTransactionServer) ProxyOrderUITransaction_XFB(context.Context, *ProxyOrderUIRequest) (*ProxyOrderUIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyOrderUITransaction_XFB not implemented")
}
func (*UnimplementedTransactionServer) MakeUpReceiptOrderTransaction(context.Context, *MakeUpReceiptOrderRequest) (*MakeUpReceiptOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeUpReceiptOrderTransaction not implemented")
}
func (*UnimplementedTransactionServer) ConfirmPayOrderTransaction(context.Context, *ConfirmPayOrderRequest) (*ConfirmPayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmPayOrderTransaction not implemented")
}
func (*UnimplementedTransactionServer) RecoverReceiptOrderTransaction(context.Context, *RecoverReceiptOrderRequest) (*RecoverReceiptOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverReceiptOrderTransaction not implemented")
}
func (*UnimplementedTransactionServer) FrozenReceiptOrderTransaction(context.Context, *FrozenReceiptOrderRequest) (*FrozenReceiptOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrozenReceiptOrderTransaction not implemented")
}
func (*UnimplementedTransactionServer) UnFrozenReceiptOrderTransaction(context.Context, *UnFrozenReceiptOrderRequest) (*UnFrozenReceiptOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFrozenReceiptOrderTransaction not implemented")
}
func (*UnimplementedTransactionServer) PersonalRebundTransaction_DFB(context.Context, *PersonalRebundRequest) (*PersonalRebundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonalRebundTransaction_DFB not implemented")
}
func (*UnimplementedTransactionServer) PersonalRebundTransaction_XFB(context.Context, *PersonalRebundRequest) (*PersonalRebundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonalRebundTransaction_XFB not implemented")
}
func (*UnimplementedTransactionServer) RecalculateProfitTransaction(context.Context, *RecalculateProfitRequest) (*RecalculateProfitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalculateProfitTransaction not implemented")
}
func (*UnimplementedTransactionServer) CalculateCommissionMonthAllReport(context.Context, *CalculateCommissionMonthAllRequest) (*CalculateCommissionMonthAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateCommissionMonthAllReport not implemented")
}
func (*UnimplementedTransactionServer) RecalculateCommissionMonthReport(context.Context, *RecalculateCommissionMonthReportRequest) (*RecalculateCommissionMonthReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalculateCommissionMonthReport not implemented")
}
func (*UnimplementedTransactionServer) ConfirmCommissionMonthReport(context.Context, *ConfirmCommissionMonthReportRequest) (*ConfirmCommissionMonthReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmCommissionMonthReport not implemented")
}
func (*UnimplementedTransactionServer) CalculateMonthProfitReport(context.Context, *CalculateMonthProfitReportRequest) (*CalculateMonthProfitReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateMonthProfitReport not implemented")
}

func RegisterTransactionServer(s *grpc.Server, srv TransactionServer) {
	s.RegisterService(&_Transaction_serviceDesc, srv)
}

func _Transaction_MerchantBalanceUpdateTranaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantBalanceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).MerchantBalanceUpdateTranaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/MerchantBalanceUpdateTranaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).MerchantBalanceUpdateTranaction(ctx, req.(*MerchantBalanceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderTranaction_DFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderTranaction_DFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/ProxyOrderTranaction_DFB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderTranaction_DFB(ctx, req.(*ProxyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderTranaction_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderTranaction_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/ProxyOrderTranaction_XFB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderTranaction_XFB(ctx, req.(*ProxyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderTransactionFail_DFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyPayFailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderTransactionFail_DFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/ProxyOrderTransactionFail_DFB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderTransactionFail_DFB(ctx, req.(*ProxyPayFailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderTransactionFail_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyPayFailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderTransactionFail_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/ProxyOrderTransactionFail_XFB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderTransactionFail_XFB(ctx, req.(*ProxyPayFailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PayOrderSwitchTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderSwitchTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PayOrderSwitchTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/PayOrderSwitchTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PayOrderSwitchTest(ctx, req.(*PayOrderSwitchTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderToTest_DFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderToTest_DFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/ProxyOrderToTest_DFB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderToTest_DFB(ctx, req.(*ProxyOrderTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderToTest_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderToTest_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/ProxyOrderToTest_XFB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderToTest_XFB(ctx, req.(*ProxyOrderTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyTestToNormal_DFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyTestToNormal_DFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/ProxyTestToNormal_DFB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyTestToNormal_DFB(ctx, req.(*ProxyOrderTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyTestToNormal_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyTestToNormal_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/ProxyTestToNormal_XFB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyTestToNormal_XFB(ctx, req.(*ProxyOrderTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PayOrderTranaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PayOrderTranaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/PayOrderTranaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PayOrderTranaction(ctx, req.(*PayOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_InternalOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).InternalOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/InternalOrderTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).InternalOrderTransaction(ctx, req.(*InternalOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_WithdrawOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).WithdrawOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/WithdrawOrderTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).WithdrawOrderTransaction(ctx, req.(*WithdrawOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PayCallBackTranaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayCallBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PayCallBackTranaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/PayCallBackTranaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PayCallBackTranaction(ctx, req.(*PayCallBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_InternalReviewSuccessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalReviewSuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).InternalReviewSuccessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/InternalReviewSuccessTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).InternalReviewSuccessTransaction(ctx, req.(*InternalReviewSuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_WithdrawReviewFailTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawReviewFailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).WithdrawReviewFailTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/WithdrawReviewFailTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).WithdrawReviewFailTransaction(ctx, req.(*WithdrawReviewFailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_WithdrawReviewSuccessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawReviewSuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).WithdrawReviewSuccessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/WithdrawReviewSuccessTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).WithdrawReviewSuccessTransaction(ctx, req.(*WithdrawReviewSuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderUITransaction_DFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderUITransaction_DFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/ProxyOrderUITransaction_DFB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderUITransaction_DFB(ctx, req.(*ProxyOrderUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ProxyOrderUITransaction_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyOrderUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ProxyOrderUITransaction_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/ProxyOrderUITransaction_XFB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ProxyOrderUITransaction_XFB(ctx, req.(*ProxyOrderUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_MakeUpReceiptOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeUpReceiptOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).MakeUpReceiptOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/MakeUpReceiptOrderTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).MakeUpReceiptOrderTransaction(ctx, req.(*MakeUpReceiptOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ConfirmPayOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmPayOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ConfirmPayOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/ConfirmPayOrderTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ConfirmPayOrderTransaction(ctx, req.(*ConfirmPayOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_RecoverReceiptOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverReceiptOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).RecoverReceiptOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/RecoverReceiptOrderTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).RecoverReceiptOrderTransaction(ctx, req.(*RecoverReceiptOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_FrozenReceiptOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrozenReceiptOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).FrozenReceiptOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/FrozenReceiptOrderTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).FrozenReceiptOrderTransaction(ctx, req.(*FrozenReceiptOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_UnFrozenReceiptOrderTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnFrozenReceiptOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).UnFrozenReceiptOrderTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/UnFrozenReceiptOrderTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).UnFrozenReceiptOrderTransaction(ctx, req.(*UnFrozenReceiptOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PersonalRebundTransaction_DFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalRebundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PersonalRebundTransaction_DFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/PersonalRebundTransaction_DFB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PersonalRebundTransaction_DFB(ctx, req.(*PersonalRebundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PersonalRebundTransaction_XFB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonalRebundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PersonalRebundTransaction_XFB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/PersonalRebundTransaction_XFB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PersonalRebundTransaction_XFB(ctx, req.(*PersonalRebundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_RecalculateProfitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecalculateProfitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).RecalculateProfitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/RecalculateProfitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).RecalculateProfitTransaction(ctx, req.(*RecalculateProfitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_CalculateCommissionMonthAllReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateCommissionMonthAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).CalculateCommissionMonthAllReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/CalculateCommissionMonthAllReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).CalculateCommissionMonthAllReport(ctx, req.(*CalculateCommissionMonthAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_RecalculateCommissionMonthReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecalculateCommissionMonthReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).RecalculateCommissionMonthReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/RecalculateCommissionMonthReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).RecalculateCommissionMonthReport(ctx, req.(*RecalculateCommissionMonthReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ConfirmCommissionMonthReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmCommissionMonthReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ConfirmCommissionMonthReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/ConfirmCommissionMonthReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ConfirmCommissionMonthReport(ctx, req.(*ConfirmCommissionMonthReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_CalculateMonthProfitReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateMonthProfitReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).CalculateMonthProfitReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/CalculateMonthProfitReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).CalculateMonthProfitReport(ctx, req.(*CalculateMonthProfitReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transaction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.Transaction",
	HandlerType: (*TransactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MerchantBalanceUpdateTranaction",
			Handler:    _Transaction_MerchantBalanceUpdateTranaction_Handler,
		},
		{
			MethodName: "ProxyOrderTranaction_DFB",
			Handler:    _Transaction_ProxyOrderTranaction_DFB_Handler,
		},
		{
			MethodName: "ProxyOrderTranaction_XFB",
			Handler:    _Transaction_ProxyOrderTranaction_XFB_Handler,
		},
		{
			MethodName: "ProxyOrderTransactionFail_DFB",
			Handler:    _Transaction_ProxyOrderTransactionFail_DFB_Handler,
		},
		{
			MethodName: "ProxyOrderTransactionFail_XFB",
			Handler:    _Transaction_ProxyOrderTransactionFail_XFB_Handler,
		},
		{
			MethodName: "PayOrderSwitchTest",
			Handler:    _Transaction_PayOrderSwitchTest_Handler,
		},
		{
			MethodName: "ProxyOrderToTest_DFB",
			Handler:    _Transaction_ProxyOrderToTest_DFB_Handler,
		},
		{
			MethodName: "ProxyOrderToTest_XFB",
			Handler:    _Transaction_ProxyOrderToTest_XFB_Handler,
		},
		{
			MethodName: "ProxyTestToNormal_DFB",
			Handler:    _Transaction_ProxyTestToNormal_DFB_Handler,
		},
		{
			MethodName: "ProxyTestToNormal_XFB",
			Handler:    _Transaction_ProxyTestToNormal_XFB_Handler,
		},
		{
			MethodName: "PayOrderTranaction",
			Handler:    _Transaction_PayOrderTranaction_Handler,
		},
		{
			MethodName: "InternalOrderTransaction",
			Handler:    _Transaction_InternalOrderTransaction_Handler,
		},
		{
			MethodName: "WithdrawOrderTransaction",
			Handler:    _Transaction_WithdrawOrderTransaction_Handler,
		},
		{
			MethodName: "PayCallBackTranaction",
			Handler:    _Transaction_PayCallBackTranaction_Handler,
		},
		{
			MethodName: "InternalReviewSuccessTransaction",
			Handler:    _Transaction_InternalReviewSuccessTransaction_Handler,
		},
		{
			MethodName: "WithdrawReviewFailTransaction",
			Handler:    _Transaction_WithdrawReviewFailTransaction_Handler,
		},
		{
			MethodName: "WithdrawReviewSuccessTransaction",
			Handler:    _Transaction_WithdrawReviewSuccessTransaction_Handler,
		},
		{
			MethodName: "ProxyOrderUITransaction_DFB",
			Handler:    _Transaction_ProxyOrderUITransaction_DFB_Handler,
		},
		{
			MethodName: "ProxyOrderUITransaction_XFB",
			Handler:    _Transaction_ProxyOrderUITransaction_XFB_Handler,
		},
		{
			MethodName: "MakeUpReceiptOrderTransaction",
			Handler:    _Transaction_MakeUpReceiptOrderTransaction_Handler,
		},
		{
			MethodName: "ConfirmPayOrderTransaction",
			Handler:    _Transaction_ConfirmPayOrderTransaction_Handler,
		},
		{
			MethodName: "RecoverReceiptOrderTransaction",
			Handler:    _Transaction_RecoverReceiptOrderTransaction_Handler,
		},
		{
			MethodName: "FrozenReceiptOrderTransaction",
			Handler:    _Transaction_FrozenReceiptOrderTransaction_Handler,
		},
		{
			MethodName: "UnFrozenReceiptOrderTransaction",
			Handler:    _Transaction_UnFrozenReceiptOrderTransaction_Handler,
		},
		{
			MethodName: "PersonalRebundTransaction_DFB",
			Handler:    _Transaction_PersonalRebundTransaction_DFB_Handler,
		},
		{
			MethodName: "PersonalRebundTransaction_XFB",
			Handler:    _Transaction_PersonalRebundTransaction_XFB_Handler,
		},
		{
			MethodName: "RecalculateProfitTransaction",
			Handler:    _Transaction_RecalculateProfitTransaction_Handler,
		},
		{
			MethodName: "CalculateCommissionMonthAllReport",
			Handler:    _Transaction_CalculateCommissionMonthAllReport_Handler,
		},
		{
			MethodName: "RecalculateCommissionMonthReport",
			Handler:    _Transaction_RecalculateCommissionMonthReport_Handler,
		},
		{
			MethodName: "ConfirmCommissionMonthReport",
			Handler:    _Transaction_ConfirmCommissionMonthReport_Handler,
		},
		{
			MethodName: "CalculateMonthProfitReport",
			Handler:    _Transaction_CalculateMonthProfitReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction.proto",
}
